<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Matt's R Blog</title>
    <link>/</link>
    <description>Recent content in Matt's R Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; Matthew Leonawicz</copyright>
    <lastBuildDate>Thu, 14 Sep 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>epubr 0.5.0 CRAN release</title>
      <link>/post/epubr-0-5-0-cran-release/</link>
      <pubDate>Sun, 18 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/epubr-0-5-0-cran-release/</guid>
      <description>


&lt;p&gt;The &lt;a href=&#34;https://github.com/ropensci/epubr&#34;&gt;epubr&lt;/a&gt; package provides functions supporting the reading and parsing of internal e-book content from EPUB files. This post briefly highlights the changes from v0.4.0. See the &lt;a href=&#34;https://ropensci.github.io/epubr/articles/epubr.html&#34;&gt;vignette&lt;/a&gt; for a more comprehensive introduction.&lt;/p&gt;
&lt;div id=&#34;minor-addition&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Minor addition&lt;/h2&gt;
&lt;p&gt;There is not much to see with the upgrade to version 0.5.0. Only one user function has been added, &lt;code&gt;epub_cat&lt;/code&gt;. All this does is allow you to &lt;code&gt;cat&lt;/code&gt; chunks of parsed e-book text to the console in a more readable manner. This can be helpful to get a quick glimpse of the content you are working with in a way that is easier on the eyes than looking at table entries and object structures.&lt;/p&gt;
&lt;p&gt;Arguments to &lt;code&gt;epub_cat&lt;/code&gt; give you control over the formatting. It is not intended to serve any other purposes beyond this human-guided content inspection. Arguments include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;max_paragraphs&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paragraph_spacing&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;paragraph_indent&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;section_sep&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;book_sep&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See the help documentation for details.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;minor-change&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Minor change&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;epub_cat&lt;/code&gt;, and now &lt;code&gt;epub_head&lt;/code&gt; for consistency, take a more generic-sounding first argument &lt;code&gt;x&lt;/code&gt; as a data argument, rather than &lt;code&gt;data&lt;/code&gt; or &lt;code&gt;file&lt;/code&gt;. This is because these summary functions can now be used on a filename string pointing to an external EPUB file that does not otherwise need to be read into R or, alternatively, a data frame already read into R by &lt;code&gt;epub&lt;/code&gt;. This allows you to avoid reading the files from disk multiple times if the data is already in your R session.&lt;/p&gt;
&lt;div id=&#34;some-context-around-epub_cat&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Some context around &lt;code&gt;epub_cat&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Also, notice that this operates on paragraphs, not lines, if by lines I meant sentences. Since this level of information has not been stripped from the text that has been read in, it can be used. This may not mean the same thing in every section of every e-book, but the general idea is that &lt;code&gt;epub_cat&lt;/code&gt; respects line breaks in the text. It pays attention to where they are and where they are not. I chose to call these paragraphs; it’s the label that is by far most often the correct one. But a one-line title or even the distinct lines of text on the copyright page of an e-book would all be treated the same way.&lt;/p&gt;
&lt;p&gt;Control ends there of course. For example, you cannot stipulate that a title line should be excluded from indenting. Remember that the purpose of &lt;code&gt;epubr&lt;/code&gt; is to bring in &lt;em&gt;text&lt;/em&gt; for analysis, while preserving much (but not all) of its structure. I.e., you want “only the text” to operate on with ease, but you also don’t want to be relegated to a single, gigantic character string (that may not even be in the correct order) that aggregates out potential variables that could be mapped to sections of text and their sequence. &lt;code&gt;epubr&lt;/code&gt; is not intended to retain all the the XML tags that define the appearance of the original document. The fundamental purpose of &lt;code&gt;epubr&lt;/code&gt; is to strip that out entirely.&lt;/p&gt;
&lt;p&gt;Here is an example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(epubr)
file &amp;lt;- system.file(&amp;quot;dracula.epub&amp;quot;, package = &amp;quot;epubr&amp;quot;)
(x &amp;lt;- epub(file))
#&amp;gt; # A tibble: 1 x 9
#&amp;gt;   rights  identifier   creator  title language subject date  source  data 
#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;lis&amp;gt;
#&amp;gt; 1 Public~ http://www.~ Bram St~ Drac~ en       Horror~ 1995~ http:/~ &amp;lt;tib~

x$data[[1]]
#&amp;gt; # A tibble: 15 x 4
#&amp;gt;    section       text                                          nword nchar
#&amp;gt;    &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;                                         &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt;  1 item6         &amp;quot;The Project Gutenberg EBook of Dracula, by ~ 11252 60972
#&amp;gt;  2 item7         &amp;quot;But I am not in heart to describe beauty, f~ 13740 71798
#&amp;gt;  3 item8         &amp;quot;\&amp;quot; &amp;#39;Lucy, you are an honest-hearted girl, I~ 12356 65522
#&amp;gt;  4 item9         &amp;quot;CHAPTER VIIIMINA MURRAY&amp;#39;S JOURNAL\nSame day~ 12042 62724
#&amp;gt;  5 item10        &amp;quot;CHAPTER X\nLetter, Dr. Seward to Hon. Arthu~ 12599 66678
#&amp;gt;  6 item11        &amp;quot;Once again we went through that ghastly ope~ 11919 62949
#&amp;gt;  7 item12        &amp;quot;CHAPTER XIVMINA HARKER&amp;#39;S JOURNAL\n23 Septem~ 12003 62234
#&amp;gt;  8 item13        &amp;quot;CHAPTER XVIDR. SEWARD&amp;#39;S DIARY-continued\nIT~ 13812 72903
#&amp;gt;  9 item14        &amp;quot;\&amp;quot;Thus when we find the habitation of this ~ 13201 69779
#&amp;gt; 10 item15        &amp;quot;\&amp;quot;I see,\&amp;quot; I said. \&amp;quot;You want big things th~ 12706 66921
#&amp;gt; 11 item16        &amp;quot;CHAPTER XXIIIDR. SEWARD&amp;#39;S DIARY\n3 October.~ 11818 61550
#&amp;gt; 12 item17        &amp;quot;CHAPTER XXVDR. SEWARD&amp;#39;S DIARY\n11 October, ~ 12989 68564
#&amp;gt; 13 item18        &amp;quot; \nLater.-Dr. Van Helsing has returned. He ~  8356 43464
#&amp;gt; 14 item19        &amp;quot;End of the Project Gutenberg EBook of Dracu~  2669 18541
#&amp;gt; 15 coverpage-wr~ &amp;quot;&amp;quot;                                                0     0

epub_cat(x, max_paragraphs = 3, skip = 100)
#&amp;gt;   CHAPTER IJONATHAN HARKER&amp;#39;S JOURNAL
#&amp;gt; 
#&amp;gt;   (Kept in shorthand.)
#&amp;gt; 
#&amp;gt;   3 May. Bistritz.-Left Munich at 8:35 P. M., on 1st May, arriving at Vienna early next morning; should have arrived at 6:46, but train was an hour late. Buda-Pesth seems a wonderful place, from the glimpse which I got of it from the train and the little I could walk through the streets. I feared to go very far from the station, as we had arrived late and would start as near the correct time as possible. The impression I had was that we were leaving the West and entering the East; the most western of splendid bridges over the Danube, which is here of noble width and depth, took us among the traditions of Turkish rule.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I suppose this function could be useful for &lt;code&gt;cat&lt;/code&gt;-ing text externally to another display or document for some use case other than just quick inspection at the console. If so, I would love to hear what that purpose is so that I might be able to improve &lt;code&gt;epub_ cat&lt;/code&gt; or add some other functionality entirely. But in general I would consider this a tangential function in &lt;code&gt;epubr&lt;/code&gt;. There are bigger fish to fry.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;encoding&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Encoding&lt;/h2&gt;
&lt;p&gt;The main change was my decision to no longer rely on native encoding (&lt;code&gt;getOption(&amp;quot;encoding&amp;quot;)&lt;/code&gt;) when reading EPUB files. In my ignorance I thought there was no reason to fuss with this. However, I began noticing issues with improper character parsing, resulting in weird characters showing up in some places. My initial thought to substitute these odd strings of characters for what they were supposed to represent, e.g., an apostrophe, was a natural first thought and it did seem like a fairly contained problem, which is why I didn’t notice it sooner and no one else made any mention of it either. But this idea was missing the bigger picture (and it didn’t work well anyway).&lt;/p&gt;
&lt;p&gt;I did some poking around and learned that while EPUB titles from various publishers can give the impression that EPUB formatting is the Wild West, there is apparently some standardization at least in terms of encoding, such that EPUB files have UTF encoding in common- UTF-8 obviously, but possibly UTF-16.&lt;/p&gt;
&lt;p&gt;This led me to add an explicit &lt;code&gt;encoding&lt;/code&gt; argument to &lt;code&gt;epub&lt;/code&gt;, defaulting to UTF-8. This still allows the user to change it, though typically there should be no reason to do so, except possibly to change it to UTF-16 and I have no idea how common that even is.&lt;/p&gt;
&lt;p&gt;This had the result of clearing up every issue I was seeing with improper character translation. Even at this point I thought it was just something to do with the fact that apparently EPUB files are all UTF-encoded. I only found out more recently that the native encoding option in relation to the Windows environment has been a nightmare to other developers on a more fundamental level.&lt;/p&gt;
&lt;p&gt;Anyhow, if you were seeing any weird characters after reading in some EPUB files with &lt;code&gt;epubr&lt;/code&gt;, hopefully the situation is improved now. I don’t expect &lt;code&gt;epubr&lt;/code&gt; to be perfect (there are some strangely put together e-books out there), but so far so good.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;upcoming-version&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Upcoming version&lt;/h2&gt;
&lt;p&gt;Work is already underway on version 0.6.0. While 0.5.0 is more of an unsung hero, making changes and handling edge cases you are unlikely to notice, 0.6.0 will add some new user functions that enhance the ease with which you can restructure parsed e-book text that comes in looking like crap due to crappy e-book metadata (see the open source packaged EPUB file above as a good example of formatting sadness). The next version will help improve some situations like this in terms of section breaks and content sequence. Garbage in does not need to equal garbage out!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>tiler 0.2.0 CRAN release: Create map tiles from R</title>
      <link>/post/tiler-0-2-0-cran-release-create-map-tiles-from-r/</link>
      <pubDate>Mon, 11 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tiler-0-2-0-cran-release-create-map-tiles-from-r/</guid>
      <description>


&lt;p&gt;&lt;img src=&#34;./img/post/tiler.png&#34; style=&#34;float:right;padding-left:10px;margin:0px;&#34; width=200 height=173/&gt;&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;tiler&lt;/code&gt; package provides a map tile-generator function for creating map tile sets for use with packages such as &lt;code&gt;leaflet&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;In addition to generating map tiles based on a common raster layer source, it also handles the non-geographic edge case, producing map tiles from arbitrary images. These map tiles, which have a “simple CRS”, a non-geographic simple Cartesian coordinate reference system, can also be used with &lt;code&gt;leaflet&lt;/code&gt; when applying the simple CRS option. Map tiles can be created from an input file with any of the following extensions: &lt;code&gt;tif&lt;/code&gt;, &lt;code&gt;grd&lt;/code&gt; and &lt;code&gt;nc&lt;/code&gt; for spatial maps and &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;jpg&lt;/code&gt; and &lt;code&gt;bmp&lt;/code&gt; for basic images.&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;a href=&#34;./img/post/tiler_ex_map.png&#34; target=&#34;blank_&#34;&gt;&lt;img src=&#34;./img/post/tiler_ex_map.png&#34; style=&#34;margin-top:20px; margin-bottom:4px;&#34;/&gt;&lt;/a&gt;&lt;em style=&#34;margin-left:40px;&#34;&gt;There are some links to example map tile sets made with &lt;code&gt;tiler&lt;/code&gt; near the bottom of the post.&lt;/em&gt;
&lt;/p&gt;
&lt;div id=&#34;setup-windows-users&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Setup (Windows users)&lt;/h2&gt;
&lt;p&gt;Python is required as well as the &lt;code&gt;gdal&lt;/code&gt; library for Python. For Windows users, this is not the same as simply having &lt;code&gt;rgdal&lt;/code&gt; installed through R. You need to install &lt;code&gt;gdal&lt;/code&gt; so that it is accessible by Python. One of the easiest and typically recommended ways to do this in Windows is to install &lt;a href=&#34;https://trac.osgeo.org/osgeo4w/&#34;&gt;OSGeo4W&lt;/a&gt;. It will bring all the required Python &lt;code&gt;gdal&lt;/code&gt; library functionality along with it. OSGeo4W is also commonly installed along with &lt;a href=&#34;https://qgis.org/en/site/forusers/download.html&#34;&gt;QGIS&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;On Windows for potential user convenience, the &lt;code&gt;tiler&lt;/code&gt; package will perform a single check on package load for the &lt;code&gt;OSgeo4W.bat&lt;/code&gt; utility at &lt;code&gt;C:/Program Files/QGIS 3.0/OSGeo4W.bat&lt;/code&gt;. If found, its path is set in &lt;code&gt;tiler_options&lt;/code&gt;. If it is not found at this precise location, the path remains unspecified and &lt;code&gt;tiler&lt;/code&gt; will fall back on only calling Python during tiling operations, assuming hopefully that &lt;code&gt;gdal&lt;/code&gt; will be available to Python nonetheless.&lt;/p&gt;
&lt;p&gt;You should not rely on a gratuitous check like this; &lt;code&gt;tiler&lt;/code&gt; is being overly generous. It is recommended that you simply add the paths for &lt;code&gt;python.exe&lt;/code&gt;, and &lt;code&gt;OSGeo4.bat&lt;/code&gt; if applicable, to your system path after installation. This way you do not need to provide these paths to &lt;code&gt;tiler_options&lt;/code&gt; in each R session; R will know where they are just like on other operating systems. That’s all that should be needed. Linux and Mac users should not have to do any additional setup as long as Python and &lt;code&gt;gdal&lt;/code&gt; for Python are installed.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;geographic-map-tiles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Geographic map tiles&lt;/h2&gt;
&lt;div id=&#34;context&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Context&lt;/h3&gt;
&lt;p&gt;For the sake of simple, expedient examples, the map tiles generated below all use small zoom level ranges. There is also no reason to attempt displaying the tiles here. To make these examples more informative, each raster is loaded and plotted for context, though this is not necessary to the tiling process. Loading the &lt;code&gt;raster&lt;/code&gt; package is only needed here for the print and plot calls.&lt;/p&gt;
&lt;p&gt;The example maps packaged with &lt;code&gt;tiler&lt;/code&gt; are not representative of large, high resolution imagery that benefits from tiling. These maps are very small in order to minimize package size and ensure examples run quickly. But the tiling procedures demonstrated are the same as would be applied to larger images.&lt;/p&gt;
&lt;p&gt;Lastly, consider the power of your system before attempting to make a ton of tiles for large images at very high resolutions. You could find that the system could hang at any one of a number of choke points. If you are attempting to make thousands of tiles for a large, high resolution image and your system is struggling, it is recommended to (1) try making tiles for only one zoom level at a time, starting from zero and then increasing while monitoring your system resources. (2) If this is not enough, find a better system.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;basic-example&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Basic example&lt;/h3&gt;
&lt;p&gt;Map tiles are generated with &lt;code&gt;tile&lt;/code&gt;. &lt;code&gt;tile&lt;/code&gt; takes an input file name &lt;code&gt;file&lt;/code&gt; for the source map and a &lt;code&gt;tiles&lt;/code&gt; destination path for where to save map tiles. The only other required argument is &lt;code&gt;zoom&lt;/code&gt;, the range of zoom levels for the tiles. This is a string of the form, e.g. &lt;code&gt;3:7&lt;/code&gt;. In this and the subsequent examples zoom levels 0-3 are used.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(tiler)
library(raster)
tile_dir &amp;lt;- file.path(tempdir(), &amp;quot;tiles&amp;quot;)
map &amp;lt;- system.file(&amp;quot;maps/map_wgs84.tif&amp;quot;, package = &amp;quot;tiler&amp;quot;)
(r &amp;lt;- raster(map))
#&amp;gt; class       : RasterLayer 
#&amp;gt; dimensions  : 32, 71, 2272  (nrow, ncol, ncell)
#&amp;gt; resolution  : 0.8333333, 0.8333333  (x, y)
#&amp;gt; extent      : -125.0208, -65.85417, 23.27083, 49.9375  (xmin, xmax, ymin, ymax)
#&amp;gt; coord. ref. : +proj=longlat +datum=WGS84 +no_defs +ellps=WGS84 +towgs84=0,0,0 
#&amp;gt; data source : C:\Users\Matt\Documents\R\win-library\3.5\tiler\maps\map_wgs84.tif 
#&amp;gt; names       : map_wgs84 
#&amp;gt; values      : -0.7205295, 5.545086  (min, max)
plot(r)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2018-06-11-tiler-0-2-0-cran-release-create-map-tiles-from-r_files/figure-html/ex1-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
tile(map, tile_dir, &amp;quot;0-3&amp;quot;)
#&amp;gt; Coloring raster...
#&amp;gt; Preparing for tiling...
#&amp;gt; Creating tiles. Please wait...
#&amp;gt; Warning in system(ex, ignore.stderr = TRUE): &amp;#39;python&amp;#39; not found
#&amp;gt; Creating tile viewer...
#&amp;gt; Complete.

list.files(tile_dir)
#&amp;gt; character(0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Listing the files in &lt;code&gt;tile_dir&lt;/code&gt; shows the top level map tiles directories, 0-3 as expected. This is not printed in subsequent examples since it is not going to change.&lt;/p&gt;
&lt;p&gt;Note that these examples rendered to HTML here do not capture the parts of the log output that result from the internal system call made by &lt;code&gt;tile&lt;/code&gt;. When you run this example yourself you will see a bit more information at the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;projected-maps&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Projected maps&lt;/h3&gt;
&lt;p&gt;The previous example used a map with a geospatial coordinate reference system (CRS) but it was not projected. That map would be ready to view with the &lt;code&gt;leaflet&lt;/code&gt; package for example, as would the tiles generated based on it. The next example uses a similar map that is projected. In order to generate map tiles that can be used with &lt;code&gt;leaflet&lt;/code&gt; in the standard CRS, the map must be reprojected first. Then the same map tiles are generated as before.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map &amp;lt;- system.file(&amp;quot;maps/map_albers.tif&amp;quot;, package = &amp;quot;tiler&amp;quot;)
(r &amp;lt;- raster(map))
#&amp;gt; class       : RasterLayer 
#&amp;gt; dimensions  : 32, 71, 2272  (nrow, ncol, ncell)
#&amp;gt; resolution  : 85011.74, 103363.8  (x, y)
#&amp;gt; extent      : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax)
#&amp;gt; coord. ref. : +proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs 
#&amp;gt; data source : C:\Users\Matt\Documents\R\win-library\3.5\tiler\maps\map_albers.tif 
#&amp;gt; names       : map_albers 
#&amp;gt; values      : -0.593978, 5.544724  (min, max)
plot(r)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2018-06-11-tiler-0-2-0-cran-release-create-map-tiles-from-r_files/figure-html/ex2-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
tile(map, tile_dir, &amp;quot;0-3&amp;quot;)
#&amp;gt; Reprojecting raster...
#&amp;gt; Coloring raster...
#&amp;gt; Preparing for tiling...
#&amp;gt; Creating tiles. Please wait...
#&amp;gt; Warning in system(ex, ignore.stderr = TRUE): &amp;#39;python&amp;#39; not found
#&amp;gt; Creating tile viewer...
#&amp;gt; Complete.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The tiles generated this time are the same as before, that is, ready for &lt;code&gt;leaflet&lt;/code&gt;. &lt;code&gt;tile&lt;/code&gt; reprojects the raster layer internally. This can be seen in the log output printed to the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;missing-crs&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Missing CRS&lt;/h3&gt;
&lt;p&gt;If the CRS of the raster is &lt;code&gt;NA&lt;/code&gt;, there are two options. By default, &lt;code&gt;tile&lt;/code&gt; will fall back on processing the raster layer as if it were a simple image file with no geospatial projection information (see the next section on simple CRS/non-geographic map tiles). These tiles are not the same as the previous sets.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map &amp;lt;- system.file(&amp;quot;maps/map_albers_NA.tif&amp;quot;, package = &amp;quot;tiler&amp;quot;)
(r &amp;lt;- raster(map))
#&amp;gt; class       : RasterLayer 
#&amp;gt; dimensions  : 32, 71, 2272  (nrow, ncol, ncell)
#&amp;gt; resolution  : 85011.74, 103363.8  (x, y)
#&amp;gt; extent      : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax)
#&amp;gt; coord. ref. : NA 
#&amp;gt; data source : C:\Users\Matt\Documents\R\win-library\3.5\tiler\maps\map_albers_NA.tif 
#&amp;gt; names       : map_albers_NA 
#&amp;gt; values      : -0.593978, 5.544724  (min, max)
plot(r)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2018-06-11-tiler-0-2-0-cran-release-create-map-tiles-from-r_files/figure-html/ex3-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
tile(map, tile_dir, &amp;quot;0-3&amp;quot;)
#&amp;gt; Warning in .proj_check(file, crs, ...): Projection expected but is missing.
#&amp;gt; Continuing as non-geographic image.
#&amp;gt; Coloring raster...
#&amp;gt; Preparing for tiling...
#&amp;gt; Creating tiles. Please wait...
#&amp;gt; Warning in system(ex, ignore.stderr = TRUE): &amp;#39;python&amp;#39; not found
#&amp;gt; Creating tile viewer...
#&amp;gt; Complete.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This is not likely what is wanted. The other option is to force set a known CRS if it is missing from the file or was dropped for whatever reason. Now reprojection can proceed and the expected tiles are generated.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;crs &amp;lt;- &amp;quot;+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs +towgs84=0,0,0&amp;quot;
tile(map, tile_dir, &amp;quot;0-3&amp;quot;, crs)
#&amp;gt; Reprojecting raster...
#&amp;gt; Coloring raster...
#&amp;gt; Preparing for tiling...
#&amp;gt; Creating tiles. Please wait...
#&amp;gt; Warning in system(ex, ignore.stderr = TRUE): &amp;#39;python&amp;#39; not found
#&amp;gt; Creating tile viewer...
#&amp;gt; Complete.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A note on reprojection: Depending on the nature of the data in a raster, the &lt;code&gt;...&lt;/code&gt; argument to &lt;code&gt;tile&lt;/code&gt; allows you to pass through the &lt;code&gt;method&lt;/code&gt; argument to &lt;code&gt;raster::projectRaster&lt;/code&gt;. This is &lt;code&gt;bilinear&lt;/code&gt; by default for bilinear interpolation, appropriate for continuous data. It can be set to &lt;code&gt;ngb&lt;/code&gt; for nearest neighbor, appropriate for discrete or categorical data. If more control is needed over the reprojection, you should just prepare your raster file first before using &lt;code&gt;tile&lt;/code&gt;. &lt;code&gt;tiler&lt;/code&gt; is not intended to substitute for or wrap general geospatial processing tasks that can easily be done with other packages.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;coloring-tiles&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Coloring tiles&lt;/h3&gt;
&lt;p&gt;Being able to change the default color palette or specify color breaks is important. All other optional &lt;code&gt;...&lt;/code&gt; arguments to &lt;code&gt;tile&lt;/code&gt; are passed to &lt;code&gt;raster::RGB&lt;/code&gt; to provide control over the creation of an intermediary RGB raster. Most arguments to &lt;code&gt;RGB&lt;/code&gt; can usually be ignored. The most useful ones are &lt;code&gt;col&lt;/code&gt; and &lt;code&gt;colNA&lt;/code&gt; for the data values color palette and the &lt;code&gt;noData&lt;/code&gt; color, respectively. Coloring tiles differently for the original example is as simple as the following.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map &amp;lt;- system.file(&amp;quot;maps/map_wgs84.tif&amp;quot;, package = &amp;quot;tiler&amp;quot;)
pal &amp;lt;- colorRampPalette(c(&amp;quot;darkblue&amp;quot;, &amp;quot;lightblue&amp;quot;))(20)
nodata &amp;lt;- &amp;quot;tomato&amp;quot;
tile(map, tile_dir, &amp;quot;0-3&amp;quot;, col = pal, colNA = nodata)
#&amp;gt; Coloring raster...
#&amp;gt; Preparing for tiling...
#&amp;gt; Creating tiles. Please wait...
#&amp;gt; Warning in system(ex, ignore.stderr = TRUE): &amp;#39;python&amp;#39; not found
#&amp;gt; Creating tile viewer...
#&amp;gt; Complete.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;rgb-and-rgba-rasters&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;RGB and RGBA rasters&lt;/h3&gt;
&lt;p&gt;Multi-band rasters are supported as long as they have three or four layers, in which case &lt;code&gt;tile&lt;/code&gt; assumes these represent red, green, blue and alpha channel, respectively. Internally, single-layer raster files are colored and converted to a three- or four-band RGB/A raster object prior to tile generation. If &lt;code&gt;file&lt;/code&gt; is already such a raster, this step is simply skipped. Optional arguments like data and &lt;code&gt;noData&lt;/code&gt; color, break points, etc., are ignored since this type of raster contains its own color information.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map &amp;lt;- system.file(&amp;quot;maps/map_albers_rgb.tif&amp;quot;, package = &amp;quot;tiler&amp;quot;)
(r &amp;lt;- brick(map))
#&amp;gt; class       : RasterBrick 
#&amp;gt; dimensions  : 32, 71, 2272, 3  (nrow, ncol, ncell, nlayers)
#&amp;gt; resolution  : 85011.74, 103363.8  (x, y)
#&amp;gt; extent      : -2976297, 3059536, -1577300, 1730342  (xmin, xmax, ymin, ymax)
#&amp;gt; coord. ref. : +proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=37.5 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs 
#&amp;gt; data source : C:\Users\Matt\Documents\R\win-library\3.5\tiler\maps\map_albers_rgb.tif 
#&amp;gt; names       : map_albers_rgb.1, map_albers_rgb.2, map_albers_rgb.3 
#&amp;gt; min values  :                0,                0,                0 
#&amp;gt; max values  :              253,              255,              244
plot(r)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2018-06-11-tiler-0-2-0-cran-release-create-map-tiles-from-r_files/figure-html/ex6-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
tile(map, tile_dir, &amp;quot;0-3&amp;quot;)
#&amp;gt; Reprojecting raster...
#&amp;gt; Preparing for tiling...
#&amp;gt; Creating tiles. Please wait...
#&amp;gt; Warning in system(ex, ignore.stderr = TRUE): &amp;#39;python&amp;#39; not found
#&amp;gt; Creating tile viewer...
#&amp;gt; Complete.&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;non-geographic-map-tiles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Non-geographic map tiles&lt;/h2&gt;
&lt;p&gt;Almost all map tiles you encounter are for geographic maps. They have a geographic coordinate reference system (CRS). Software used to display these map tiles, such as Leaflet, is similarly focused on these kinds of map tiles. Everything is geared towards the dominant use case involving geospatial coordinate systems.&lt;/p&gt;
&lt;p&gt;However, there are edge cases where non-geographic maps are required. These can be maps of outer space, game board maps, etc. The base map used to generate map tiles is usually a simple image like a &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;jpg&lt;/code&gt; or &lt;code&gt;bmp&lt;/code&gt; file. The coordinate reference system is a simple Cartesian coordinate system based on the matrix of pixels or grid cells that represent the image.&lt;/p&gt;
&lt;p&gt;There is no longitude or latitude or more complex geospatial projection associated with these maps, which is why they are said to have a “simple CRS”. Simple does not necessarily mean easier to work with, however, because geospatial tools, like Leaflet for example, do not cater naturally to non-geographic coordinate systems. Using these map tiles in Leaflet is possible, but takes a bit of non-standard effort.&lt;/p&gt;
&lt;div id=&#34;basic-example-1&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Basic example&lt;/h3&gt;
&lt;p&gt;One example was shown previously where a spatial map lacking critical spatial reference information was processed as a simple image. In the example below, this is the intent. Here, the map is a &lt;code&gt;png&lt;/code&gt; file. It is a previously saved plot of the Albers-projected US map used in the earlier projected geotiff example. You can see it has a color key legend. As a simple image, all of this will be tiled.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;map &amp;lt;- system.file(&amp;quot;maps/map.png&amp;quot;, package = &amp;quot;tiler&amp;quot;)
plotRGB(brick(map))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;./post/2018-06-11-tiler-0-2-0-cran-release-create-map-tiles-from-r_files/figure-html/ex7-1.png&#34; width=&#34;672&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
tile(map, tile_dir, &amp;quot;0-3&amp;quot;)
#&amp;gt; Creating tiles. Please wait...
#&amp;gt; Warning in system(ex, ignore.stderr = TRUE): &amp;#39;python&amp;#39; not found
#&amp;gt; Creating tile viewer...
#&amp;gt; Complete.&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;tile&lt;/code&gt; function will automatically process simple image files differently. There is no concept of projection, and coloring tiles is irrelevant because the image file has its own coloring already. Map tiles generated from regular image files can be used with &lt;code&gt;leaflet&lt;/code&gt; if done properly. The generated tiles have a simple CRS that is based on the pixel dimensions of the image file. If you were to use these tiles in &lt;code&gt;leaflet&lt;/code&gt; for example and you wanted to overlay map markers, you would have to first georeference your locations of interest based on the matrix rows and columns of the image. This is outside the scope of &lt;code&gt;tiler&lt;/code&gt;. See the Leaflet JS and &lt;code&gt;leaflet&lt;/code&gt; package documentation for details on using simple CRS/non-geographic tiles.&lt;/p&gt;
&lt;p&gt;Using a &lt;code&gt;png&lt;/code&gt; file is recommended for quality and file size. &lt;code&gt;jpg&lt;/code&gt; may yield a lower quality result, while a large, high resolution &lt;code&gt;bmp&lt;/code&gt; file may have an enormous file size compared to &lt;code&gt;png&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;jpg&lt;/code&gt; and &lt;code&gt;bmp&lt;/code&gt; are &lt;em&gt;optionally&lt;/em&gt; supported by &lt;code&gt;tiler&lt;/code&gt;. This means they are not installed and imported with &lt;code&gt;tiler&lt;/code&gt;. It is assumed the user will provide &lt;code&gt;png&lt;/code&gt; images. If using &lt;code&gt;jpg&lt;/code&gt; or &lt;code&gt;bmp&lt;/code&gt; and the packages &lt;code&gt;jpeg&lt;/code&gt; or &lt;code&gt;bmp&lt;/code&gt; are not installed, respectively, &lt;code&gt;tile&lt;/code&gt; will print a message to the console notifying of the required package installations.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;additional-arguments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Additional arguments&lt;/h2&gt;
&lt;p&gt;Other arguments to &lt;code&gt;tile&lt;/code&gt; include &lt;code&gt;format&lt;/code&gt;, &lt;code&gt;resume&lt;/code&gt;, &lt;code&gt;viewer&lt;/code&gt; and &lt;code&gt;georef&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;format&lt;/code&gt; is either &lt;code&gt;xyz&lt;/code&gt; (default) or &lt;code&gt;tms&lt;/code&gt;. &lt;code&gt;gdal2tiles&lt;/code&gt; generates TMS tiles, but XYZ may be more familiar. Tile format only applies to geographic maps. All simple image-based tiles are XYZ format. If setting &lt;code&gt;format = &amp;quot;tms&amp;quot;&lt;/code&gt; you may need to do something similar in your Leaflet JavaScript or &lt;code&gt;leaflet&lt;/code&gt; package R code for tiles to display with the proper orientation.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;resume = TRUE&lt;/code&gt; simply avoids overwriting tiles by picking up where you left off without changing your set zoom levels and output path.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;viewer = TRUE&lt;/code&gt; creates &lt;code&gt;preview.html&lt;/code&gt; adjacent to the &lt;code&gt;tiles&lt;/code&gt; directory for previewing tiles in the browser using Leaflet. &lt;code&gt;georef = TRUE&lt;/code&gt; adds mouse click feedback to the Leaflet widget. Map markers with matrix index coordinate labels appear on mouse click to assist with georeferencing. &lt;code&gt;georef&lt;/code&gt; only applies to non-geographic tiles. This allows for interactive georeferencing of pixels in the image.&lt;/p&gt;
&lt;p&gt;Finally, &lt;code&gt;...&lt;/code&gt; can pass along some additional arguments. See help documentation for details.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;serving-map-tiles&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Serving map tiles&lt;/h2&gt;
&lt;p&gt;Map tiles must be served online to be of much use. Serving map tiles is not the purpose of &lt;code&gt;tiler&lt;/code&gt; but using your GitHub account is an easy way to do this. Create a GitHub repository, enable GitHub pages for the repository in the repository settings. If the repository is exclusively for serving your map tiles, just set the master branch as the source for your GitHub pages. After committing and pushing your tiles to GitHub, you can access them using a URL of the form&lt;/p&gt;
&lt;p&gt;&lt;code&gt;https://&amp;lt;your account name&amp;gt;.github.io/maptiles/tiles/{z}/{x}/{y}.png&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if you store your tiles in a folder named &lt;code&gt;tiles&lt;/code&gt; in a repository named &lt;code&gt;maptiles&lt;/code&gt; for example.&lt;/p&gt;
&lt;p&gt;Here are some &lt;a href=&#34;https://github.com/leonawicz/tiles/&#34;&gt;examples of non-geographic tile sets&lt;/a&gt; hosted on GitHub using Star Trek galaxy maps generated with &lt;code&gt;tiler&lt;/code&gt; and here they are used in &lt;a href=&#34;https://leonawicz.github.io/rtrek/articles/sc.html&#34;&gt;Leaflet maps&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;local-preview&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Local preview&lt;/h3&gt;
&lt;p&gt;By default &lt;code&gt;tile&lt;/code&gt; also creates &lt;code&gt;preview.html&lt;/code&gt; as noted above. This can also be created or re-created directly using &lt;code&gt;tile_viewer&lt;/code&gt;. In either case, as long as &lt;code&gt;preview.html&lt;/code&gt; exists alongside the tiles directory, it can easily be loaded in the browser with &lt;code&gt;view_tiles&lt;/code&gt;. See help documentation for details.&lt;/p&gt;
&lt;p&gt;If you have tiles in a directory &lt;code&gt;&amp;quot;project/tiles&amp;quot;&lt;/code&gt;, creating &lt;code&gt;preview.html&lt;/code&gt; directly can be done as follows. The arguments shown are just for illustration.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;tile_viewer(&amp;quot;project/tiles&amp;quot;, &amp;quot;3-7&amp;quot;) # geographic tiles
tile_viewer(&amp;quot;project/tiles&amp;quot;, &amp;quot;3-7&amp;quot;, width = 1000, height = 1000) # non-geographic tiles&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;However the tile preview document is created, it can be viewed by passing the same &lt;code&gt;tiles&lt;/code&gt; directory to &lt;code&gt;view_tiles&lt;/code&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;view_tiles(&amp;quot;project/tiles&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;details&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Details&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;leaflet&lt;/code&gt; R code needed in order to use custom non-geographic tiles like these requires setting &lt;code&gt;leafletOptions(crs = leafletCRS(&amp;quot;L.CRS.Simple&amp;quot;))&lt;/code&gt; as well as calling &lt;code&gt;addTiles(urlTemplate = url)&lt;/code&gt; where &lt;code&gt;url&lt;/code&gt; is like the example URL shown above. Setting the focus of the map can be a bit tricky for non-geographic map tiles based on an arbitrary image file. It may take some trial and error to get a sense for the custom coordinate system.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>epubr 0.4.0 CRAN release</title>
      <link>/post/epubr-0-4-0-cran-release/</link>
      <pubDate>Tue, 05 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/epubr-0-4-0-cran-release/</guid>
      <description>


&lt;p&gt;The &lt;a href=&#34;https://github.com/ropensci/epubr&#34;&gt;epubr&lt;/a&gt; package provides functions supporting the reading and parsing of internal e-book content from EPUB files. E-book metadata and text content are parsed separately and joined together in a tidy, nested tibble data frame.&lt;/p&gt;
&lt;p&gt;E-book formatting is non-standard enough across all literature that no function can curate parsed e-book content across an arbitrary collection of e-books, in completely general form, resulting in a singular, consistently formatted output containing all the same variables.&lt;/p&gt;
&lt;p&gt;EPUB file parsing functionality in this package is intended for relatively general application to arbitrary EPUB e-books. However, poorly formatted e-books or e-books with highly uncommon formatting may not work with this package. There may even be cases where an EPUB file has DRM or some other property that makes it impossible to read with &lt;code&gt;epubr&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Text is read ‘as is’. Additional text cleaning should be performed by the user at their discretion, such as with functions from packages like &lt;code&gt;tm&lt;/code&gt; or &lt;code&gt;qdap&lt;/code&gt;.&lt;/p&gt;
&lt;div id=&#34;read-epub-files&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Read EPUB files&lt;/h2&gt;
&lt;p&gt;Bram Stoker’s Dracula novel sourced from Project Gutenberg is a good example of an EPUB file with unfortunate formatting. The first thing that stands out is the naming convention using &lt;code&gt;item&lt;/code&gt; followed by some ordered digits does not differentiate sections like the book preamble from the chapters. The numbering also starts in a weird place. But it is actually worse than this. Notice that sections are not broken into chapters; they can begin and end in the middle of chapters!&lt;/p&gt;
&lt;p&gt;These annoyances aside, the metadata and contents can still be read into a convenient table. Text mining analyses can still be performed on the overall book, if not so easily on individual chapters.&lt;/p&gt;
&lt;p&gt;Here a single file is read with &lt;code&gt;epub&lt;/code&gt;. The output of the returned primary data frame and the book text data frame that is nested within its &lt;code&gt;data&lt;/code&gt; column are shown.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(epubr)
file &amp;lt;- system.file(&amp;quot;dracula.epub&amp;quot;, package = &amp;quot;epubr&amp;quot;)
(x &amp;lt;- epub(file))
#&amp;gt; # A tibble: 1 x 9
#&amp;gt;   rights  identifier   creator  title language subject date  source  data 
#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;        &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;   &amp;lt;lis&amp;gt;
#&amp;gt; 1 Public~ http://www.~ Bram St~ Drac~ en       Horror~ 1995~ http:/~ &amp;lt;tib~

x$data[[1]]
#&amp;gt; # A tibble: 15 x 4
#&amp;gt;    section       text                                          nword nchar
#&amp;gt;    &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;                                         &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt;  1 item6         &amp;quot;The Project Gutenberg EBook of Dracula, by ~ 11252 60972
#&amp;gt;  2 item7         &amp;quot;But I am not in heart to describe beauty, f~ 13740 71798
#&amp;gt;  3 item8         &amp;quot;\&amp;quot; &amp;#39;Lucy, you are an honest-hearted girl, I~ 12356 65522
#&amp;gt;  4 item9         &amp;quot;CHAPTER VIIIMINA MURRAY&amp;#39;S JOURNAL\nSame day~ 12042 62724
#&amp;gt;  5 item10        &amp;quot;CHAPTER X\nLetter, Dr. Seward to Hon. Arthu~ 12599 66678
#&amp;gt;  6 item11        &amp;quot;Once again we went through that ghastly ope~ 11919 62949
#&amp;gt;  7 item12        &amp;quot;CHAPTER XIVMINA HARKER&amp;#39;S JOURNAL\n23 Septem~ 12003 62234
#&amp;gt;  8 item13        &amp;quot;CHAPTER XVIDR. SEWARD&amp;#39;S DIARY-continued\nIT~ 13812 72903
#&amp;gt;  9 item14        &amp;quot;\&amp;quot;Thus when we find the habitation of this ~ 13201 69779
#&amp;gt; 10 item15        &amp;quot;\&amp;quot;I see,\&amp;quot; I said. \&amp;quot;You want big things th~ 12706 66921
#&amp;gt; 11 item16        &amp;quot;CHAPTER XXIIIDR. SEWARD&amp;#39;S DIARY\n3 October.~ 11818 61550
#&amp;gt; 12 item17        &amp;quot;CHAPTER XXVDR. SEWARD&amp;#39;S DIARY\n11 October, ~ 12989 68564
#&amp;gt; 13 item18        &amp;quot; \nLater.-Dr. Van Helsing has returned. He ~  8356 43464
#&amp;gt; 14 item19        &amp;quot;End of the Project Gutenberg EBook of Dracu~  2669 18541
#&amp;gt; 15 coverpage-wr~ &amp;quot;&amp;quot;                                                0     0&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;file&lt;/code&gt; argument may be a vector of EPUB files. There is one row for each book.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;epub-metadata&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;EPUB metadata&lt;/h2&gt;
&lt;p&gt;The above examples jump right in, but it can be helpful to inspect file metadata before reading a large number of books into memory. Formatting may differ across books. It can be helpful to know what fields to expect, the degree of consistency, and what content you may want to drop during the file reading process. &lt;code&gt;epub_meta&lt;/code&gt; strictly parses file metadata and does not read the e-book text.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;epub_meta(file)
#&amp;gt; # A tibble: 1 x 8
#&amp;gt;   rights    identifier    creator  title language subject date  source    
#&amp;gt;   &amp;lt;chr&amp;gt;     &amp;lt;chr&amp;gt;         &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;     
#&amp;gt; 1 Public d~ http://www.g~ Bram St~ Drac~ en       Horror~ 1995~ http://ww~&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This provides the big picture, though it will not reveal the internal breakdown of book section naming conventions that were seen in the first &lt;code&gt;epub&lt;/code&gt; example.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;file&lt;/code&gt; can also be a vector for &lt;code&gt;epub_meta&lt;/code&gt;. Whenever &lt;code&gt;file&lt;/code&gt; is a vector, the fields (columns) returned are the union of all fields detected across all EPUB files. Any books (rows) that do not have a field found in another book return &lt;code&gt;NA&lt;/code&gt; for that row and column.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;additonal-arguments&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Additonal arguments&lt;/h2&gt;
&lt;p&gt;There are three optional arguments that can be provided to &lt;code&gt;epub&lt;/code&gt; to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;select fields, or columns of the primary data frame.&lt;/li&gt;
&lt;li&gt;filter sections, or rows of the nested data frame.&lt;/li&gt;
&lt;li&gt;attempt to detect which rows or sections in the nested data frame identify book chapters.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Unless you have a collection of well-formatted and similarly formatted EPUB files, these arguments may not be helpful and can be ignored, especially chapter detection.&lt;/p&gt;
&lt;div id=&#34;select-fields&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Select fields&lt;/h3&gt;
&lt;p&gt;Selecting fields is straightforward. All fields found are returned unless a vector of fields is provided.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;epub(file, fields = c(&amp;quot;title&amp;quot;, &amp;quot;creator&amp;quot;, &amp;quot;file&amp;quot;))
#&amp;gt; # A tibble: 1 x 4
#&amp;gt;   title   creator     file         data             
#&amp;gt;   &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;       &amp;lt;chr&amp;gt;        &amp;lt;list&amp;gt;           
#&amp;gt; 1 Dracula Bram Stoker dracula.epub &amp;lt;tibble [15 x 4]&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note that &lt;code&gt;file&lt;/code&gt; was not a field identified in the metadata. This is a special case. Including &lt;code&gt;file&lt;/code&gt; will include the &lt;code&gt;basename&lt;/code&gt; of the input file. This is helpful when you want to retain file names and &lt;code&gt;source&lt;/code&gt; is included in the metadata but may represent something else. Some fields like &lt;code&gt;data&lt;/code&gt; are always returned and do not need to be specified in &lt;code&gt;fields&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;drop-sections&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Drop sections&lt;/h3&gt;
&lt;p&gt;Filtering out unwanted sections, or rows of the nested data frame, uses a regular expression pattern. Matched rows are dropped. This is where knowing the naming conventions used in the e-books in &lt;code&gt;file&lt;/code&gt;, or at least knowing they are satisfactorily consistent and predictable for a collection, helps with removing extraneous clutter.&lt;/p&gt;
&lt;p&gt;One section that can be discarded is the cover. For many books it can be helpful to use a pattern like &lt;code&gt;&amp;quot;^(C|c)ov&amp;quot;&lt;/code&gt; to drop any sections whose IDs begin with &lt;code&gt;Cov&lt;/code&gt;, &lt;code&gt;cov&lt;/code&gt;, and may be that abbreviation or the full word. For this book, &lt;code&gt;cov&lt;/code&gt; suffices. The nested data frame has one less row than before.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;epub(file, drop_sections = &amp;quot;cov&amp;quot;)$data[[1]]
#&amp;gt; # A tibble: 14 x 4
#&amp;gt;    section text                                                nword nchar
#&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                                               &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt;  1 item6   &amp;quot;The Project Gutenberg EBook of Dracula, by Bram S~ 11252 60972
#&amp;gt;  2 item7   &amp;quot;But I am not in heart to describe beauty, for whe~ 13740 71798
#&amp;gt;  3 item8   &amp;quot;\&amp;quot; &amp;#39;Lucy, you are an honest-hearted girl, I know.~ 12356 65522
#&amp;gt;  4 item9   &amp;quot;CHAPTER VIIIMINA MURRAY&amp;#39;S JOURNAL\nSame day, 11 o~ 12042 62724
#&amp;gt;  5 item10  &amp;quot;CHAPTER X\nLetter, Dr. Seward to Hon. Arthur Holm~ 12599 66678
#&amp;gt;  6 item11  &amp;quot;Once again we went through that ghastly operation~ 11919 62949
#&amp;gt;  7 item12  &amp;quot;CHAPTER XIVMINA HARKER&amp;#39;S JOURNAL\n23 September.-J~ 12003 62234
#&amp;gt;  8 item13  &amp;quot;CHAPTER XVIDR. SEWARD&amp;#39;S DIARY-continued\nIT was j~ 13812 72903
#&amp;gt;  9 item14  &amp;quot;\&amp;quot;Thus when we find the habitation of this man-th~ 13201 69779
#&amp;gt; 10 item15  &amp;quot;\&amp;quot;I see,\&amp;quot; I said. \&amp;quot;You want big things that you~ 12706 66921
#&amp;gt; 11 item16  &amp;quot;CHAPTER XXIIIDR. SEWARD&amp;#39;S DIARY\n3 October.-The t~ 11818 61550
#&amp;gt; 12 item17  &amp;quot;CHAPTER XXVDR. SEWARD&amp;#39;S DIARY\n11 October, Evenin~ 12989 68564
#&amp;gt; 13 item18  &amp;quot; \nLater.-Dr. Van Helsing has returned. He has go~  8356 43464
#&amp;gt; 14 item19  &amp;quot;End of the Project Gutenberg EBook of Dracula, by~  2669 18541&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;guess-chapters&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Guess chapters&lt;/h3&gt;
&lt;p&gt;This e-book unfortunately does not have great formatting. For the sake of example, pretend that chapters are known to be sections beginning with &lt;code&gt;item&lt;/code&gt; and followed by &lt;em&gt;two&lt;/em&gt; digits, using the pattern &lt;code&gt;^item\\d\\d&lt;/code&gt;. This does two things. It adds a new metadata column to the primary data frame called &lt;code&gt;nchap&lt;/code&gt; giving the estimated number of chapters in the book. In the nested data frame containing the parsed e-book text, the &lt;code&gt;section&lt;/code&gt; column is conditionally mutated to reflect a new, consistent chapter naming convention for the identified chapters and a logical &lt;code&gt;is_chapter&lt;/code&gt; column is added.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;x &amp;lt;- epub(file, drop_sections = &amp;quot;cov&amp;quot;, chapter_pattern = &amp;quot;^item\\d\\d&amp;quot;)
x
#&amp;gt; # A tibble: 1 x 10
#&amp;gt;   rights identifier creator title language subject date  source nchap data
#&amp;gt;   &amp;lt;chr&amp;gt;  &amp;lt;chr&amp;gt;      &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt; &amp;lt;chr&amp;gt;  &amp;lt;int&amp;gt; &amp;lt;li&amp;gt;
#&amp;gt; 1 Publi~ http://ww~ Bram S~ Drac~ en       Horror~ 1995~ http:~    10 &amp;lt;ti~

x$data[[1]]
#&amp;gt; # A tibble: 14 x 5
#&amp;gt;    section text                                     is_chapter nword nchar
#&amp;gt;    &amp;lt;chr&amp;gt;   &amp;lt;chr&amp;gt;                                    &amp;lt;lgl&amp;gt;      &amp;lt;int&amp;gt; &amp;lt;int&amp;gt;
#&amp;gt;  1 item6   &amp;quot;The Project Gutenberg EBook of Dracula~ FALSE      11252 60972
#&amp;gt;  2 item7   &amp;quot;But I am not in heart to describe beau~ FALSE      13740 71798
#&amp;gt;  3 item8   &amp;quot;\&amp;quot; &amp;#39;Lucy, you are an honest-hearted gi~ FALSE      12356 65522
#&amp;gt;  4 item9   &amp;quot;CHAPTER VIIIMINA MURRAY&amp;#39;S JOURNAL\nSam~ FALSE      12042 62724
#&amp;gt;  5 ch01    &amp;quot;CHAPTER X\nLetter, Dr. Seward to Hon. ~ TRUE       12599 66678
#&amp;gt;  6 ch02    &amp;quot;Once again we went through that ghastl~ TRUE       11919 62949
#&amp;gt;  7 ch03    &amp;quot;CHAPTER XIVMINA HARKER&amp;#39;S JOURNAL\n23 S~ TRUE       12003 62234
#&amp;gt;  8 ch04    &amp;quot;CHAPTER XVIDR. SEWARD&amp;#39;S DIARY-continue~ TRUE       13812 72903
#&amp;gt;  9 ch05    &amp;quot;\&amp;quot;Thus when we find the habitation of ~ TRUE       13201 69779
#&amp;gt; 10 ch06    &amp;quot;\&amp;quot;I see,\&amp;quot; I said. \&amp;quot;You want big thin~ TRUE       12706 66921
#&amp;gt; 11 ch07    &amp;quot;CHAPTER XXIIIDR. SEWARD&amp;#39;S DIARY\n3 Oct~ TRUE       11818 61550
#&amp;gt; 12 ch08    &amp;quot;CHAPTER XXVDR. SEWARD&amp;#39;S DIARY\n11 Octo~ TRUE       12989 68564
#&amp;gt; 13 ch09    &amp;quot; \nLater.-Dr. Van Helsing has returned~ TRUE        8356 43464
#&amp;gt; 14 ch10    &amp;quot;End of the Project Gutenberg EBook of ~ TRUE        2669 18541&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Also note that not all books have chapters. Make sure an optional argument makes sense to use with a given e-book.&lt;/p&gt;
&lt;p&gt;Some e-books have formatting that puts chapter sections completely out of order even when they may be easily separable from other book sections and this can be another roadblock, as you may correctly identify and distinguish chapters from other book sections like cover, title, copyright and acknowledgements pages, but you will number the chapters incorrectly.&lt;/p&gt;
&lt;p&gt;There are some developmental options that can get around issues like this in certain edge cases and where certain reasonable conditions can be met. For example, a second pass can be attempted internally in a call to &lt;code&gt;epub&lt;/code&gt; to cross reference guessed chapter sections with the presence of something like &lt;code&gt;CHAPTER&lt;/code&gt; (or some other secondary regular expression pattern) appearing at the beginning of the actual section text. All is not necessarily lost when file metadata formatting is not useful for a given e-book.&lt;/p&gt;
&lt;p&gt;These developmental arguments are currently undocumented, though they can be explored if you are inclined to read the package source code and pass additional arguments to &lt;code&gt;...&lt;/code&gt;. They have been tested successfully on many e-books, but certainly not a representative sample of all e-books. The approaches these arguments use may also change before they are formally supported and explicitly added to a future version of the package.&lt;/p&gt;
&lt;p&gt;Ultimately though, everything depends on the quality of the EPUB file. Some publishers are better than others. Formatting standards may also change over time.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;unzip-epub-file&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Unzip EPUB file&lt;/h2&gt;
&lt;p&gt;Separate from using &lt;code&gt;epub_meta&lt;/code&gt; and &lt;code&gt;epub&lt;/code&gt;, you can call &lt;code&gt;epub_unzip&lt;/code&gt; directly if all you want to do is extract the files from the &lt;code&gt;.epub&lt;/code&gt; file archive. By default the archive files are extracted to &lt;code&gt;tempdir()&lt;/code&gt; so you may want to change this with the &lt;code&gt;exdir&lt;/code&gt; argument.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;bookdir &amp;lt;- file.path(tempdir(), &amp;quot;dracula&amp;quot;)
epub_unzip(file, exdir = bookdir)
list.files(bookdir, recursive = TRUE)
#&amp;gt;  [1] &amp;quot;META-INF/container.xml&amp;quot;                                                  
#&amp;gt;  [2] &amp;quot;mimetype&amp;quot;                                                                
#&amp;gt;  [3] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-0.htm.html&amp;quot;   
#&amp;gt;  [4] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-1.htm.html&amp;quot;   
#&amp;gt;  [5] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-10.htm.html&amp;quot;  
#&amp;gt;  [6] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-11.htm.html&amp;quot;  
#&amp;gt;  [7] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-12.htm.html&amp;quot;  
#&amp;gt;  [8] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-13.htm.html&amp;quot;  
#&amp;gt;  [9] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-2.htm.html&amp;quot;   
#&amp;gt; [10] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-3.htm.html&amp;quot;   
#&amp;gt; [11] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-4.htm.html&amp;quot;   
#&amp;gt; [12] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-5.htm.html&amp;quot;   
#&amp;gt; [13] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-6.htm.html&amp;quot;   
#&amp;gt; [14] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-7.htm.html&amp;quot;   
#&amp;gt; [15] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-8.htm.html&amp;quot;   
#&amp;gt; [16] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@345-h-9.htm.html&amp;quot;   
#&amp;gt; [17] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@images@colophon.png&amp;quot;
#&amp;gt; [18] &amp;quot;OEBPS/@public@vhost@g@gutenberg@html@files@345@345-h@images@cover.jpg&amp;quot;   
#&amp;gt; [19] &amp;quot;OEBPS/0.css&amp;quot;                                                             
#&amp;gt; [20] &amp;quot;OEBPS/1.css&amp;quot;                                                             
#&amp;gt; [21] &amp;quot;OEBPS/content.opf&amp;quot;                                                       
#&amp;gt; [22] &amp;quot;OEBPS/pgepub.css&amp;quot;                                                        
#&amp;gt; [23] &amp;quot;OEBPS/toc.ncx&amp;quot;                                                           
#&amp;gt; [24] &amp;quot;OEBPS/wrap0000.html&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>trekfont: Star Trek-themed fonts package</title>
      <link>/post/trekfont-star-trek-themed-fonts-package/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/trekfont-star-trek-themed-fonts-package/</guid>
      <description>


&lt;p&gt;&lt;a href=&#34;https://cran.r-project.org/web/packages/trekfont/&#34;&gt;trekfont&lt;/a&gt; is now available on CRAN. This is a simple data package that exposes 107 Star Trek font families. You might not want to use Star Trek fonts for work, but if you are making plots for fun and like Star Trek then these fonts are for you.&lt;/p&gt;
&lt;p&gt;This post gives a basic example of one how to load these fonts in R for use in plots. Using external font files is handled by the &lt;code&gt;showtext&lt;/code&gt; package, which uses the &lt;code&gt;sysfonts&lt;/code&gt; package to load the fonts. There is no need to load the &lt;code&gt;trekfont&lt;/code&gt; package directly; you only need it installed. To see all available font files, call &lt;code&gt;trekfont::trekfonts&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This example shows eight fonts. &lt;code&gt;font_add&lt;/code&gt; and &lt;code&gt;font_families&lt;/code&gt; below are part of the &lt;code&gt;sysfonts&lt;/code&gt; package loaded by &lt;code&gt;showtext&lt;/code&gt;. Use these to load fonts and then check to see that they are now available, respectively. &lt;code&gt;showtext_auto&lt;/code&gt; handles the rest. If you are not already familiar with &lt;code&gt;showtext&lt;/code&gt; see its documentation for broader examples.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# install.packages(&amp;quot;trekfont&amp;quot;)
library(showtext)
font &amp;lt;- c(&amp;quot;Khan&amp;quot;, &amp;quot;StarNext&amp;quot;, &amp;quot;FederationDS9Title&amp;quot;, &amp;quot;Federation&amp;quot;, &amp;quot;Klingon&amp;quot;, &amp;quot;ModernVulcan&amp;quot;, &amp;quot;TNGcast&amp;quot;, &amp;quot;FederationStarfleet&amp;quot;)
path &amp;lt;- system.file(paste0(&amp;quot;fonts/&amp;quot;, font, &amp;quot;.ttf&amp;quot;), package = &amp;quot;trekfont&amp;quot;)
for(i in 1:8) font_add(font[i], path[i])
font_families()
#&amp;gt;  [1] &amp;quot;sans&amp;quot;                &amp;quot;serif&amp;quot;               &amp;quot;mono&amp;quot;               
#&amp;gt;  [4] &amp;quot;wqy-microhei&amp;quot;        &amp;quot;Khan&amp;quot;                &amp;quot;StarNext&amp;quot;           
#&amp;gt;  [7] &amp;quot;FederationDS9Title&amp;quot;  &amp;quot;Federation&amp;quot;          &amp;quot;Klingon&amp;quot;            
#&amp;gt; [10] &amp;quot;ModernVulcan&amp;quot;        &amp;quot;TNGcast&amp;quot;             &amp;quot;FederationStarfleet&amp;quot;
showtext_auto()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;First use base graphics.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;y &amp;lt;- seq(0.1, 0.9, length.out = 7)
txt &amp;lt;- &amp;quot;The Quick Brown Fox Jumps Over The Lazy Dog&amp;quot;
plot(0, 0, type = &amp;quot;n&amp;quot;, ylim = c(0, 1), main = &amp;quot;trekfont package font sample&amp;quot;, family = font[8])
for(i in 1:7) text(0, y[i], txt, family = font[i])&lt;/code&gt;&lt;/pre&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;./img/post/trekfont_plot.png&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;Did you ever think you would be annotating your plots in Vulcan and Klingon? Next use ggplot2.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
g &amp;lt;- ggplot() + theme_gray(base_family = font[8]) + ggtitle(&amp;quot;trekfont package font sample&amp;quot;)
for(i in 1:7) g &amp;lt;- g + annotate(&amp;quot;text&amp;quot;, 0, y[i], label = txt, family = font[i], size=12.5)
g&lt;/code&gt;&lt;/pre&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;./img/post/trekfont_ggplot.png&#34;/&gt;
&lt;/p&gt;
&lt;p&gt;That’s all there is to it. &lt;em&gt;Qapla’&lt;/em&gt;! The above code is simplified. You can tweak your &lt;code&gt;par&lt;/code&gt; and &lt;code&gt;ggplot2&lt;/code&gt; theme settings to achieve a similar appearance to what is shown in the plots.&lt;/p&gt;
&lt;p&gt;If you have trouble with the fonts not displaying and are receiving warnings such as&lt;/p&gt;
&lt;p&gt;&lt;code&gt;In grid.Call.graphics(C_text, as.graphicsAnnot(x$label), x$x, x$y,  :   font family not found in Windows font database&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;don’t be a &lt;em&gt;petaQ&lt;/em&gt;. Try using &lt;code&gt;showtext&lt;/code&gt; via the regular R GUI rather than through the RStudio IDE. Unfortunately &lt;code&gt;showtext&lt;/code&gt; does not currently work with RStudio’s built-in graphics device.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>tabr package for guitar tablature now on CRAN</title>
      <link>/post/tabr-package-for-guitar-tablature-now-on-cran/</link>
      <pubDate>Thu, 19 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/tabr-package-for-guitar-tablature-now-on-cran/</guid>
      <description>

&lt;p style=&#34;text-align:center;&#34;&gt;
&lt;a href=&#34;https://github.com/leonawicz/tabr&#34;&gt;&lt;img src=&#34;https://github.com/leonawicz/tabr/blob/master/data-raw/tabr.png?raw=true&#34; width=&#34;40%&#34;&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/leonawicz/tabr&#34; target=&#34;_blank&#34;&gt;tabr&lt;/a&gt; package for creating guitar tablature (&amp;ldquo;tabs&amp;rdquo;) from R code is now available on CRAN. &lt;code&gt;tabr&lt;/code&gt; provides programmatic music notation and a wrapper around &lt;a href=&#34;http://lilypond.org/&#34; target=&#34;_blank&#34;&gt;LilyPond&lt;/a&gt; for creating quality guitar tablature.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tabr&lt;/code&gt; offers functions for describing and organizing musical structures and wraps around the LilyPond backend. LilyPond is an open source music engraving program for generating high quality sheet music based on markup syntax. &lt;code&gt;tabr&lt;/code&gt; generates files following the LilyPond markup syntax to be subsequently processed by LilyPond into sheet music.&lt;/p&gt;

&lt;p&gt;A standalone LilyPond (.ly) file can be created or the package can make a system call to LilyPond directly to render the guitar tablature output (pdf or png). While LilyPond caters to sheet music in general, &lt;code&gt;tabr&lt;/code&gt; is focused on leveraging it specifically for creating quality guitar tablature.&lt;/p&gt;

&lt;p&gt;While music can be quite complex and a full score will be much longer, something as simple as the following code snippet produces the music notation in the accompanying image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p(&amp;quot;r a2 c f d a f c4&amp;quot;, &amp;quot;4 8*6 1&amp;quot;) %&amp;gt;% track %&amp;gt;% score %&amp;gt;% tab(&amp;quot;out.pdf&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p style=&#34;text-align:center;&#34;&gt;
&lt;img src=&#34;https://github.com/leonawicz/tabr/blob/master/data-raw/staff_with_code.png?raw=true&#34; width=&#34;100%&#34;&gt;
&lt;/p&gt;

&lt;h2 id=&#34;functionality-and-support&#34;&gt;Functionality and support&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;tabr&lt;/code&gt; package offers the following:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Render guitar tablature and sheet music to pdf or png.&lt;/li&gt;
&lt;li&gt;Write accompanying MIDI files that can respect repeat notation and transposition in the sheet music (under reasonable conditions).&lt;/li&gt;
&lt;li&gt;Support tablature for other string instruments besides guitar such as bass or banjo.&lt;/li&gt;
&lt;li&gt;Support for instruments with different numbers of strings.&lt;/li&gt;
&lt;li&gt;Support for arbitrary instrument tuning.&lt;/li&gt;
&lt;li&gt;Offers inclusion (or exclusion) of formal music staves above tab staves, such as treble and bass clef staves for complete rhythm and timing information.&lt;/li&gt;
&lt;li&gt;Track-specific setup for features like instrument type, tuning and supplemental music staves.&lt;/li&gt;
&lt;li&gt;Provide common notation such as slide, bend, hammer on, pull off, slur, tie, staccato, dotted notes, visible and silent rests.&lt;/li&gt;
&lt;li&gt;Allows arbitrary tuplet structure.&lt;/li&gt;
&lt;li&gt;Above-staff text annotation.&lt;/li&gt;
&lt;li&gt;Percent and volta repeat section notation.&lt;/li&gt;
&lt;li&gt;Note transposition.&lt;/li&gt;
&lt;li&gt;Staff transposition.&lt;/li&gt;
&lt;li&gt;Multiple voices per track and multiple tracks per score.&lt;/li&gt;
&lt;li&gt;Chord symbols above staff&lt;/li&gt;
&lt;li&gt;Chord fretboard diagrams and chord chart at top of score.&lt;/li&gt;
&lt;li&gt;Rich set of layout control options covering settings from score attributions to font size.&lt;/li&gt;
&lt;li&gt;Optional alternative input format allowing the user to provide string/fret combinations (along with key signature and instrument tuning) to map to pitch.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that MIDI support and string/fret alternative input format support are not prioritized in ongoing &lt;code&gt;tabr&lt;/code&gt; development. These are considered tangential extra features in &lt;code&gt;tabr&lt;/code&gt; that fall outside the general scope and intent of the package.&lt;/p&gt;

&lt;h2 id=&#34;basic-example&#34;&gt;Basic example&lt;/h2&gt;

&lt;p&gt;A brief example below highlights the general workflow.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define a musical phrase with &lt;code&gt;phrase&lt;/code&gt; or the shorthand alias &lt;code&gt;p&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the phrase to a &lt;code&gt;track&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the track to a &lt;code&gt;score&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Render the score to pdf with &lt;code&gt;tab&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;constructing-a-musical-phrase&#34;&gt;Constructing a musical phrase&lt;/h2&gt;

&lt;p&gt;A phrase here does not require a strict definition. Think of it as the smallest piece of musical structure you intend to string together. The first argument to &lt;code&gt;phrase&lt;/code&gt; is a string describing notes of a specific pitch (or rests: &amp;ldquo;r&amp;rdquo;), separated in time by spaces. For chords, just remove spaces to indicate simultaneous notes. Integers are appended to indicate the octave number so that the pitch is unique. For example, a rest followed by a sequence of notes might be given by &lt;code&gt;notes = &amp;quot;r a2 c3 f3 d3 a3 f3&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second argument is a similar string giving note metadata. In this example there is nothing to add but the time durations. Whole notes taking up an entire measure of music are given by 1, half notes by 2, quarter notes 4, eighth notes 8, and so on. To specify a quarter note rest followed by a sequence of eighth notes, use &lt;code&gt;info = &amp;quot;4 8 8 8 8 8 8&amp;quot;&lt;/code&gt;. This basic example does not require specifying additional note information such as dotted notes for different fractions of time, staccato notes, ties/slurs, slides, bends, hammer ons and pull offs, etc. These specifications are currently available in &lt;code&gt;tabr&lt;/code&gt; to varying degrees of development and are covered in the vignette tutorials.&lt;/p&gt;

&lt;p&gt;The third argument, &lt;code&gt;string&lt;/code&gt;, is optional but generally important for guitar tablature. In similar format, it specifies the strings of the guitar on which notes are played. Providing this information fixes the fret-string combinations so that LilyPond does not have to guess what position on the neck of the guitar to play a specific note. An inability to specify this in various tablature notation software (or laziness by the user), is a common cause of inaccurate tabs scouring the internet, where even when the notes are correct they are written in the tab suggesting they be played in positions no one would sensibly use. Note that the &lt;code&gt;x&lt;/code&gt; shown below is just a placeholder indicating no need to specify a string for the quarter note rest.&lt;/p&gt;

&lt;p&gt;The example below employs a couple shortcuts to further reduce typing, using the &lt;code&gt;*&lt;/code&gt; in-string expansion operator to avoid typing a long series of eighth notes. It also drops explicit reference to octave number three since this central octave is the default octave in LilyPond. While explicit string numbers are not needed for this example, they are provided anyway for full context.&lt;/p&gt;

&lt;h2 id=&#34;score-metadata-and-accessing-lilypond&#34;&gt;Score metadata and accessing LilyPond&lt;/h2&gt;

&lt;p&gt;Finally, specify some song metadata to reproduce the original staff: the key of D minor, common time, and the tempo.&lt;/p&gt;

&lt;p&gt;If LilyPond is installed on your system (and added to your system PATH variable on Windows systems), &lt;code&gt;tab&lt;/code&gt; should call it successfully. Alternatively, on Windows, it can be added explicitly by calling &lt;code&gt;tabr_options&lt;/code&gt;. This option to specify the LilyPond path is still available on other systems. An example of this is commented out below. However, &lt;code&gt;tabr&lt;/code&gt; will do its best on package load to set these paths in &lt;code&gt;tabr_options&lt;/code&gt; for you if it can successfully detect a LilyPond installation in a standard file system location, so you may not have to do anything.&lt;/p&gt;

&lt;h2 id=&#34;r-code&#34;&gt;R code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tabr)
# path &amp;lt;- &#39;C:/Program Files (x86)/LilyPond/usr/bin/lilypond.exe&#39;
# tabr_options(lilypond = path)

p1 &amp;lt;- p(&amp;quot;r a2 c f d a f&amp;quot;, &amp;quot;4 8*6&amp;quot;, &amp;quot;x 5 5 4 4 3 4&amp;quot;)
song &amp;lt;- p1 %&amp;gt;% track %&amp;gt;% score
tab(song, &amp;quot;phrase.pdf&amp;quot;, key = &amp;quot;dm&amp;quot;, time = &amp;quot;4/4&amp;quot;, tempo = &amp;quot;4 = 120&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; #### Engraving score to phrase.pdf ####
#&amp;gt; GNU LilyPond 2.18.2
#&amp;gt; Processing `./phrase.ly&#39;
#&amp;gt; Parsing...
#&amp;gt; Interpreting music...
#&amp;gt; Preprocessing graphical objects...
#&amp;gt; Interpreting music...
#&amp;gt; MIDI output to `./phrase.mid&#39;...
#&amp;gt; Finding the ideal number of pages...
#&amp;gt; Fitting music on 1 page...
#&amp;gt; Drawing systems...
#&amp;gt; Layout output to `./phrase.ps&#39;...
#&amp;gt; Converting to `./phrase.pdf&#39;...
#&amp;gt; Success: compilation successfully completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the pdf result embedded at the &lt;a href=&#34;https://leonawicz.github.io/tabr/&#34; target=&#34;_blank&#34;&gt;tabr website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;additional-context&#34;&gt;Additional context&lt;/h2&gt;

&lt;p&gt;Why LilyPond? LilyPond is an exceptional sheet music engraving program. It produces professional, high quality output. It is open source. It offers an access point for a programmatic approach to music notation. It is developed and utilized by a large community. Most GUI-based applications are WYSIWYG and force a greater limitation on what you can do and what it will look like after you do it. On the other hand, I have zero interest in writing LilyPond files. &lt;code&gt;tabr&lt;/code&gt; has made it more enjoyable, a bit less ugly, and enables me to stick with LilyPond for its quality as I try to shield myself from its native input structures. I&amp;rsquo;m sure there are far more LilyPond users who don&amp;rsquo;t mind it at all and have never heard of R; to each their own.&lt;/p&gt;

&lt;h2 id=&#34;limitations&#34;&gt;Limitations&lt;/h2&gt;

&lt;p&gt;There is far more that LilyPond can do that &lt;code&gt;tabr&lt;/code&gt; does not tap into. Instead of listing a million things, this is just to highlight an example of a critical feature that still has limited functionality in both &lt;code&gt;tabr&lt;/code&gt; and in LilyPond itself: LilyPond&amp;rsquo;s bend engraver. Rendering sheet music with quality string bend notation is quite difficult. This is an area that will benefit greatly from further development.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;There is a rich collection of vignette tutorials available at the tabr website.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://leonawicz.github.io/tabr/&#34; target=&#34;_blank&#34;&gt;Complete package reference and function documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Introducing tabr: guitar tabs with R</title>
      <link>/post/introducing-tabr-guitar-tabs-with-r/</link>
      <pubDate>Mon, 19 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/introducing-tabr-guitar-tabs-with-r/</guid>
      <description>

&lt;p style=&#34;text-align:center;&#34;&gt;
&lt;a href=&#34;https://github.com/leonawicz/tabr&#34;&gt;&lt;img src=&#34;https://github.com/leonawicz/tabr/blob/master/data-raw/tabr_logo.png?raw=true&#34; width=&#34;100%&#34;&gt;&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;This post introduces a new R package I am working on called &lt;a href=&#34;https://github.com/leonawicz/tabr&#34; target=&#34;_blank&#34;&gt;tabr&lt;/a&gt; for creating guitar tablature (&amp;ldquo;tabs&amp;rdquo;) from R code. The &lt;code&gt;tabr&lt;/code&gt; package provides programmatic music notation and a wrapper around &lt;a href=&#34;http://lilypond.org/&#34; target=&#34;_blank&#34;&gt;LilyPond&lt;/a&gt; for creating quality guitar tablature.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;tabr&lt;/code&gt; offers functions for describing and organizing musical structures and wraps around the LilyPond backend. LilyPond is an open source music engraving program for generating high quality sheet music based on markup syntax. &lt;code&gt;tabr&lt;/code&gt; generates files following the LilyPond markup syntax to be subsequently processed by LilyPond into sheet music.&lt;/p&gt;

&lt;p&gt;A standalone LilyPond (.ly) file can be created or the package can make a system call to LilyPond directly to render the guitar tablature output (pdf or png). While LilyPond caters to sheet music in general, &lt;code&gt;tabr&lt;/code&gt; is focused on leveraging it specifically for creating quality guitar tablature.&lt;/p&gt;

&lt;p&gt;While music can be quite complex and a full score will be much longer, something as simple as the following code snippet produces the music notation in the accompanying image.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;p(&amp;quot;r a2 c f d a f c4&amp;quot;, &amp;quot;4 8*6 1&amp;quot;) %&amp;gt;% track %&amp;gt;% score %&amp;gt;% tab(&amp;quot;out.pdf&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p style=&#34;text-align:center;&#34;&gt;
&lt;img src=&#34;https://github.com/leonawicz/tabr/blob/master/data-raw/staff_with_code.png?raw=true&#34; width=&#34;100%&#34;&gt;
&lt;/p&gt;

&lt;h2 id=&#34;installation&#34;&gt;Installation&lt;/h2&gt;

&lt;p&gt;You can install tabr from GitHub with:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# install.packages(&#39;devtools&#39;)
devtools::install_github(&amp;quot;leonawicz/tabr&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;basic-example&#34;&gt;Basic example&lt;/h2&gt;

&lt;p&gt;As a brief example, recreate the tablature shown in the &lt;code&gt;tabr&lt;/code&gt; logo, which is almost the same as the first measure in the code example above. It has a tiny bit more in the form of metadata and doesn&amp;rsquo;t take as many shortcuts, but it&amp;rsquo;s still short. Here are the steps.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Define a musical phrase with &lt;code&gt;phrase&lt;/code&gt; or the shorthand alias &lt;code&gt;p&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the phrase to a &lt;code&gt;track&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Add the track to a &lt;code&gt;score&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Render the score to pdf with &lt;code&gt;tab&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;constructing-a-musical-phrase&#34;&gt;Constructing a musical phrase&lt;/h2&gt;

&lt;p&gt;A phrase here does not require a strict definition. Think of it as the smallest piece of musical structure you intend to string together. The first argument to &lt;code&gt;phrase&lt;/code&gt; is a string describing notes of a specific pitch (or rests: &amp;ldquo;r&amp;rdquo;), separated in time by spaces. For chords, just remove spaces to indicate simultaneous notes. Integers are appended to indicate the octave number so that the pitch is unique. For example, a rest followed by a sequence of notes might be given by &lt;code&gt;notes = &amp;quot;r a2 c3 f3 d3 a3 f3&amp;quot;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The second argument is a similar string giving note metadata. In this example there is nothing to add but the time durations. Whole notes taking up an entire measure of music are given by 1, half notes by 2, quarter notes 4, eighth notes 8, and so on. To specify a quarter note rest followed by a sequence of eighth notes, use &lt;code&gt;info = &amp;quot;4 8 8 8 8 8 8&amp;quot;&lt;/code&gt;. This basic example does not require specifying additional note information such as dotted notes for different fractions of time, staccato notes, ties/slurs, slides, bends, hammer ons and pull offs, etc. These specifications are currently available in &lt;code&gt;tabr&lt;/code&gt; to varying degrees of development and are covered in the vignette tutorials.&lt;/p&gt;

&lt;p&gt;The third argument, &lt;code&gt;string&lt;/code&gt;, is optional but generally important for guitar tablature. In similar format, it specifies the strings of the guitar on which notes are played. Providing this information fixes the fret-string combinations so that LilyPond does not have to guess what position on the neck of the guitar to play a specific note. An inability to specify this in various tablature notation software (or laziness by the user), is a common cause of inaccurate tabs scouring the internet, where even when the notes are correct they are written in the tab suggesting they be played in positions no one would sensibly use. Note that the &lt;code&gt;x&lt;/code&gt; shown below is just a placeholder indicating no need to specify a string for the quarter note rest.&lt;/p&gt;

&lt;h2 id=&#34;score-metadata-and-accessing-lilypond&#34;&gt;Score metadata and accessing LilyPond&lt;/h2&gt;

&lt;p&gt;Finally, specify some song metadata to reproduce the original staff: the key of D minor, common time, and the tempo. If LilyPond is installed on your system (and added to your system PATH variable on Windows systems), &lt;code&gt;tab&lt;/code&gt; should call it successfully. Alternatively, on Windows, it can be added explicitly by calling &lt;code&gt;tabr_options&lt;/code&gt;. This option to specify the LilyPond path is still available on other systems. An example of this is commented out below.&lt;/p&gt;

&lt;h2 id=&#34;r-code&#34;&gt;R code&lt;/h2&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(tabr)
# path &amp;lt;- &#39;C:/Program Files (x86)/LilyPond/usr/bin/lilypond.exe&#39;
# tabr_options(lilypond = path)

p1 &amp;lt;- p(&amp;quot;r a2 c3 f3 d3 a3 f3&amp;quot;, &amp;quot;4 8 8 8 8 8 8&amp;quot;, &amp;quot;x 5 5 4 4 3 4&amp;quot;)
track1 &amp;lt;- track(p1)
song &amp;lt;- score(track1)
tab(song, &amp;quot;phrase.pdf&amp;quot;, key = &amp;quot;dm&amp;quot;, time = &amp;quot;4/4&amp;quot;, tempo = &amp;quot;4 = 120&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;#&amp;gt; #### Engraving score to phrase.pdf ####
#&amp;gt; GNU LilyPond 2.18.2
#&amp;gt; Processing `./phrase.ly&#39;
#&amp;gt; Parsing...
#&amp;gt; Interpreting music...
#&amp;gt; Preprocessing graphical objects...
#&amp;gt; Interpreting music...
#&amp;gt; MIDI output to `./phrase.mid&#39;...
#&amp;gt; Finding the ideal number of pages...
#&amp;gt; Fitting music on 1 page...
#&amp;gt; Drawing systems...
#&amp;gt; Layout output to `./phrase.ps&#39;...
#&amp;gt; Converting to `./phrase.pdf&#39;...
#&amp;gt; Success: compilation successfully completed
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;See the pdf result embedded at the &lt;a href=&#34;https://leonawicz.github.io/tabr/&#34; target=&#34;_blank&#34;&gt;tabr website&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;development-status-context-and-caveats&#34;&gt;Development status, context and caveats&lt;/h2&gt;

&lt;p&gt;First, why LilyPond? LilyPond is an exceptional sheet music engraving program. It produces professional, high quality output. It is open source. It offers an access point for a programmatic approach to music notation. It is developed and utilized by a large community. Most GUI-based applications are WYSIWYG and force a greater limitation on what you can do and what it will look like after you do it. On the other hand, I have zero interest in writing LilyPond files. &lt;code&gt;tabr&lt;/code&gt; has made it more enjoyable, a bit less ugly, and enables me to stick with LilyPond for its quality as I try to shield myself from its native input structures. I&amp;rsquo;m sure there are far more LilyPond users who don&amp;rsquo;t mind it at all and have never heard of R; to each their own.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tabr&lt;/code&gt; package is in early development. Breaking changes could occur in a later version. Many capabilities are missing. Others are incompletely implemented. Others in the R developer community who are probably much better musicians than myself are welcome to contribute. This is the type of package that will only develop in response to specific needs of its contributor(s). There are many things that &lt;code&gt;tabr&lt;/code&gt; does not address at this stage of development. For example, &lt;code&gt;tabr&lt;/code&gt; assumes standard guitar tuning. It has no ability to recognize or handle non-standard tunings or instruments like bass with a different number of strings. There are essentially countless other aspects of music notation available in LilyPond that &lt;code&gt;tabr&lt;/code&gt; does not wrap around. The aim is not to do it all, but certainly to do much more than is currently in place.&lt;/p&gt;

&lt;p&gt;I am not an expert in music theory, or in music notation and transcription, or in LilyPond. In fact, my skill in music notation is ironically low enough that I do not find it any more challenging or an impediment to describe a song in R code rather than to just tab it out by hand. The main intent with &lt;code&gt;tabr&lt;/code&gt;, however, is simply to be able to generate markup files that LilyPond accepts and understands, without having to write that markup directly.&lt;/p&gt;

&lt;p&gt;Finally, there are nonetheless limitations to LilyPond itself. It has been developed for sheet music in general and guitar tablature features were added as a relative afterthought. There are plenty of features I have not yet developed R wrappers around. Then there are other features like string bending that are technically available, but not fully developed yet on the LilyPond side either. Case in point, LilyPond&amp;rsquo;s bend engraver is still under development; specifying something as common as a bend-release-pull-off is, to put it mildly, challenging.&lt;/p&gt;

&lt;h2 id=&#34;reference&#34;&gt;Reference&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://leonawicz.github.io/tabr/&#34; target=&#34;_blank&#34;&gt;Complete package reference and function documentation&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Mix ggplot2 graphs with your favorite memes. memery 0.4.2 released.</title>
      <link>/post/2018-02-09-mix-ggplot2-graphs-with-your-favorite-memes-memery-0-4-2-on-cran/</link>
      <pubDate>Tue, 13 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>/post/2018-02-09-mix-ggplot2-graphs-with-your-favorite-memes-memery-0-4-2-on-cran/</guid>
      <description>


&lt;p&gt;Make memorable plots with memery. &lt;code&gt;memery&lt;/code&gt; is an R package that generates internet memes including superimposed inset graphs and other atypical features, combining the visual impact of an attention-grabbing meme with graphic results of data analysis. &lt;a href=&#34;https://cran.r-project.org/web/packages/memery/&#34;&gt;Version 0.4.2&lt;/a&gt; of &lt;code&gt;memery&lt;/code&gt; is now on CRAN. The latest development version and a package vignette are available on &lt;a href=&#34;https://github.com/leonawicz/memery&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div id=&#34;changes-in-v0.4.2&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Changes in v0.4.2&lt;/h2&gt;
&lt;p&gt;This latest version of &lt;code&gt;memery&lt;/code&gt; includes a demo Shiny app.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(memery)
memeApp()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Animated gif support is now also included (example below). This relies on the &lt;code&gt;magick&lt;/code&gt; package and ImageMagick software, but this is optional and these libraries are not required for you to use &lt;code&gt;memery&lt;/code&gt; if you have no interest in animated gifs. For example, when launching the demo Shiny app, if you do not have these libraries installed on your system, the app launches in your browser in a simplified form. It will only accept png and jpg files as inputs and a default static image will be shown at startup. Alternatively, the app launches in full mode, will also accept gif inputs, and the default image shown is an animated gif. The only function in &lt;code&gt;memery&lt;/code&gt; that pertains to gifs is &lt;code&gt;meme_gif&lt;/code&gt;, which is distinct from the main package function, &lt;code&gt;meme&lt;/code&gt;. If you call &lt;code&gt;meme_gif&lt;/code&gt; without the supporting libraries, it simply prints a notification about this to the console.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;example-usage&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Example usage&lt;/h2&gt;
&lt;p&gt;Below is an example interleaving a semi-transparent ggplot2 graph between a meme image backdrop and overlying meme text labels. The &lt;code&gt;meme&lt;/code&gt; function will produce basic memes without needing to specify a number of additional arguments, but this is not the main purpose of the package. Adding a plot is then as simple as passing the plot to &lt;code&gt;inset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;memery&lt;/code&gt; offers sensible defaults as well as a variety of basic templates for controlling how the meme and graph are spliced together. The example here shows how additional arguments can be specified to further control the content and layout. See the package &lt;a href=&#34;https://leonawicz.github.io/memery/articles/memery.html&#34;&gt;vignette&lt;/a&gt; for a more complete set of examples and description of available features and graph templates.&lt;/p&gt;
&lt;p&gt;Please do share your data analyst meme creations. Enjoy!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(memery)

# Make a graph of some data
library(ggplot2)
x &amp;lt;- seq(0, 2 * pi, length.out = 50)
panels &amp;lt;- rep(c(&amp;quot;Plot A&amp;quot;, &amp;quot;Plot B&amp;quot;), each = 50)
d &amp;lt;- data.frame(x = x, y = sin(x), grp = panels)
txt &amp;lt;- c(&amp;quot;Philosoraptor&amp;#39;s plots&amp;quot;, &amp;quot;I like to make plots&amp;quot;, &amp;quot;Figure 1. (A) shows a plot and (B) shows another plot.&amp;quot;)
p &amp;lt;- ggplot(d, aes(x, y)) + geom_line(colour = &amp;quot;cornflowerblue&amp;quot;, size = 2) + 
    geom_point(colour = &amp;quot;orange&amp;quot;, size = 4) + facet_wrap(~grp) + labs(title = txt[1], 
    subtitle = txt[2], caption = txt[3])

# Meme settings
img &amp;lt;- system.file(&amp;quot;philosoraptor.jpg&amp;quot;, package = &amp;quot;memery&amp;quot;)
lab &amp;lt;- c(&amp;quot;What to call my R package?&amp;quot;, &amp;quot;Hmm... What? raptr is taken!?&amp;quot;, &amp;quot;Noooooo!!!!&amp;quot;)
size &amp;lt;- c(1.8, 1.5, 2.2)  # label sizes
pos &amp;lt;- list(w = rep(0.9, 3), h = rep(0.3, 3), x = c(0.45, 0.6, 0.5), y = c(0.95, 
    0.85, 0.3))
fam &amp;lt;- c(&amp;quot;Impact&amp;quot;, &amp;quot;serif&amp;quot;, &amp;quot;Impact&amp;quot;)
col &amp;lt;- list(c(&amp;quot;black&amp;quot;, &amp;quot;orange&amp;quot;, &amp;quot;white&amp;quot;), c(&amp;quot;white&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;black&amp;quot;))
gbg &amp;lt;- list(fill = &amp;quot;#FF00FF50&amp;quot;, col = &amp;quot;#FFFFFF75&amp;quot;)  # graph background

# Save meme
meme(img, lab, &amp;quot;meme.jpg&amp;quot;, size = size, family = fam, col = col[[1]], shadow = col[[2]], 
    label_pos = pos, inset = p, inset_bg = gbg, mult = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;./img/post/meme.jpg&#34;/&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;animated-gif-example&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Animated gif example&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;d$grp &amp;lt;- gsub(&amp;quot;Plot&amp;quot;, &amp;quot;Cat&amp;#39;s Plot&amp;quot;, d$grp)
p &amp;lt;- ggplot(d, aes(x, y)) + geom_line(colour = &amp;quot;white&amp;quot;, size = 2) + geom_point(colour = &amp;quot;orange&amp;quot;, 
    size = 1) + facet_wrap(~grp) + labs(title = &amp;quot;The wiggles&amp;quot;, subtitle = &amp;quot;Plots for cats&amp;quot;, 
    caption = &amp;quot;Figure 1. Gimme sine waves.&amp;quot;)
lab &amp;lt;- c(&amp;quot;R plots for cats&amp;quot;, &amp;quot;Sine wave sine wave...&amp;quot;)
pos &amp;lt;- list(w = rep(0.9, 2), h = rep(0.3, 2), x = rep(0.5, 2), y = c(0.9, 0.75))
img &amp;lt;- &amp;quot;http://forgifs.com/gallery/d/228621-4/Cat-wiggles.gif&amp;quot;
meme_gif(img, lab, &amp;quot;sine.gif&amp;quot;, size = c(1.5, 0.75), label_pos = pos, inset = p, 
    inset_bg = list(fill = &amp;quot;#00BFFF80&amp;quot;), fps = 20)&lt;/code&gt;&lt;/pre&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;https://github.com/leonawicz/DataVisExamples/blob/master/packages/memery.gif?raw=true&#34;&gt;
&lt;/p&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Make memorable plots with memery. v0.3.0 now on CRAN.</title>
      <link>/post/2017-11-09-memery-0-3-0-on-cran/</link>
      <pubDate>Thu, 09 Nov 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-11-09-memery-0-3-0-on-cran/</guid>
      <description>


&lt;p&gt;Make memorable plots with memery. &lt;code&gt;memery&lt;/code&gt; is an R package that generates internet memes including superimposed inset graphs and other atypical features, combining the visual impact of an attention-grabbing meme with graphic results of data analysis. &lt;a href=&#34;https://cran.r-project.org/web/packages/memery/&#34;&gt;Version 0.3.0&lt;/a&gt; of &lt;code&gt;memery&lt;/code&gt; is now on CRAN. The latest development version and a package vignette are available on &lt;a href=&#34;https://github.com/leonawicz/memery&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Below is an example interleaving a semi-transparent ggplot2 graph between a meme image backdrop and overlying meme text labels. The &lt;code&gt;meme&lt;/code&gt; function will produce basic memes without needing to specify a number of additional arguments, but this is not the main purpose of the package. Adding a plot is then as simple as passing the plot to &lt;code&gt;inset&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;memery&lt;/code&gt; offers sensible defaults as well as a variety of basic templates for controlling how the meme and graph are spliced together. The example here shows how additional arguments can be specified to further control the content and layout. See the package &lt;a href=&#34;https://leonawicz.github.io/memery/articles/memery.html&#34;&gt;vignette&lt;/a&gt; for a more complete set of examples and description of available features and graph templates.&lt;/p&gt;
&lt;p&gt;Please do share your data analyst meme creations. Enjoy!&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(memery)

# Make a graph of some data
library(ggplot2)
x &amp;lt;- seq(0, 2 * pi, length.out = 50)
panels &amp;lt;- rep(c(&amp;quot;Plot A&amp;quot;, &amp;quot;Plot B&amp;quot;), each = 50)
d &amp;lt;- data.frame(x = x, y = sin(x), grp = panels)
txt &amp;lt;- c(&amp;quot;Philosoraptor&amp;#39;s plots&amp;quot;, &amp;quot;I like to make plots&amp;quot;, &amp;quot;Figure 1. (A) shows a plot and (B) shows another plot.&amp;quot;)
p &amp;lt;- ggplot(d, aes(x, y)) + geom_line(colour = &amp;quot;cornflowerblue&amp;quot;, size = 2) + 
    geom_point(colour = &amp;quot;orange&amp;quot;, size = 4) + facet_wrap(~grp) + labs(title = txt[1], 
    subtitle = txt[2], caption = txt[3])

# Meme settings
img &amp;lt;- system.file(&amp;quot;philosoraptor.jpg&amp;quot;, package = &amp;quot;memery&amp;quot;)
lab &amp;lt;- c(&amp;quot;What to call my R package?&amp;quot;, &amp;quot;Hmm... What? raptr is taken!?&amp;quot;, &amp;quot;Noooooo!!!!&amp;quot;)
size &amp;lt;- c(1.8, 1.5, 2.2)  # label sizes
pos &amp;lt;- list(w = rep(0.9, 3), h = rep(0.3, 3), x = c(0.45, 0.6, 0.5), y = c(0.95, 
    0.85, 0.3))
fam &amp;lt;- c(&amp;quot;Impact&amp;quot;, &amp;quot;serif&amp;quot;, &amp;quot;Impact&amp;quot;)
col &amp;lt;- list(c(&amp;quot;black&amp;quot;, &amp;quot;orange&amp;quot;, &amp;quot;white&amp;quot;), c(&amp;quot;white&amp;quot;, &amp;quot;black&amp;quot;, &amp;quot;black&amp;quot;))
gbg &amp;lt;- list(fill = &amp;quot;#FF00FF50&amp;quot;, col = &amp;quot;#FFFFFF75&amp;quot;)  # graph background

# Save meme
meme(img, lab, &amp;quot;meme.jpg&amp;quot;, size = size, family = fam, col = col[[1]], shadow = col[[2]], 
    label_pos = pos, inset = p, inset_bg = gbg, mult = 2)&lt;/code&gt;&lt;/pre&gt;
&lt;p align=&#34;center&#34;&gt;
&lt;img src=&#34;./img/post/meme.jpg&#34;/&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>apputils 0.5.0 released</title>
      <link>/post/apputils-0-5-0-released/</link>
      <pubDate>Tue, 24 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/apputils-0-5-0-released/</guid>
      <description>

&lt;p&gt;Version 0.5.0 of the &lt;a href=&#34;https://github.com/leonawicz/apputils&#34; target=&#34;_blank&#34;&gt;apputils&lt;/a&gt; R package has been released on GitHub.
Complete documentation is available at the &lt;a href=&#34;https://leonawicz.github.io/apputils&#34; target=&#34;_blank&#34;&gt;apputils website&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The key updates are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Added &lt;code&gt;exApp&lt;/code&gt; for running Shiny app package examples.&lt;/li&gt;
&lt;li&gt;Ported custom icons demo app to &lt;code&gt;apputils&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Included all current custom icons in example app, adding the newer linear model themed icons.&lt;/li&gt;
&lt;li&gt;Added package css for &lt;code&gt;infoBox&lt;/code&gt; override.&lt;/li&gt;
&lt;li&gt;Added introduction vignette content for stat boxes with package icons.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can now call &lt;code&gt;exApp(&amp;quot;icons&amp;quot;)&lt;/code&gt; to view the stat box icons examples locally.
Available icons are grouped into three categories.&lt;/p&gt;

&lt;h3 id=&#34;icons-representing-common-statistics&#34;&gt;Icons representing common statistics&lt;/h3&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/post/apputils_vbox1.png&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;icons-representing-delta-change-or-trends&#34;&gt;Icons representing delta change or trends&lt;/h3&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/post/apputils_vbox2.png&#34;/&gt;&lt;/p&gt;

&lt;h3 id=&#34;icons-related-to-fitting-statistical-models&#34;&gt;Icons related to fitting statistical models&lt;/h3&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/post/apputils_vbox3.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;These are the recent updates to &lt;code&gt;apputils&lt;/code&gt;. However, the package offers other helpful utilities such as convenient functions for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;app citation&lt;/li&gt;
&lt;li&gt;a showcase widget for displaying and linking to other related apps&lt;/li&gt;
&lt;li&gt;an author/contact info widget&lt;/li&gt;
&lt;li&gt;dashboard sidebar footer logo&lt;/li&gt;
&lt;li&gt;collapsible FAQ widget&lt;/li&gt;
&lt;li&gt;integration with &lt;code&gt;rintrojs&lt;/code&gt; and &lt;code&gt;shinytoastr&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These utilities involve relatively canned styles of presentation so they are not universally suitable for all users and use cases, but they offer convenience when applicable. An example app that uses several utilities from &lt;code&gt;apputils&lt;/code&gt; is my recent work in progress, the SNAP &lt;a href=&#34;https://uasnap.shinyapps.io/climdist/&#34; target=&#34;_blank&#34;&gt;Climate Analytics&lt;/a&gt; app.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Climate explorer update: monthly data and delta change</title>
      <link>/post/climate-explorer-update-monthly-data-and-delta-change/</link>
      <pubDate>Mon, 23 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/climate-explorer-update-monthly-data-and-delta-change/</guid>
      <description>&lt;p&gt;The SNAP &lt;a href=&#34;https://uasnap.shinyapps.io/climdist/&#34; target=&#34;_blank&#34;&gt;Climate Analytics&lt;/a&gt; Shiny app has been updated.
Previously, the app included seasonally and annually aggregated data.
With the recent inclusion of monthly data, the number of conditional spatio-temporal climate probability distributions has now increased from a base set of about 13 million unique distributions to over 46 million. The &lt;code&gt;Season&lt;/code&gt; dropdown menu now offers annual average, 3-month seasonals, and individual months.&lt;/p&gt;

&lt;p&gt;These conditional distributions for historical and projected temperature and precipitation over different geographic regions, time periods, climate models and greenhouse gas emissions scenarios represent the source data sets available in the app. This count does not include the marginal distributions users can estimate on the fly while using the app. For example, you can look at annual probability distributions for five different climate models, but while this may be of interest in some cases, in others it may be more interesting to to investigate the spatial distribution of temperature for a multi-model composite over some aggregate time period. This is where the app really shines; not in the large number of available conditional distributions, but rather in providing real-time estimation of marginal distributions of interest to users.&lt;/p&gt;

&lt;p&gt;The other major change is the ability to convert figures and statistics to reflect projected delta change (anomalies) in comparison with a historical climatology period.
The new option can be found in the &lt;code&gt;Additional settings&lt;/code&gt; modal.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/post/climdist_climatology.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;In this example, the data selection is as shown here.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/post/climdist_data.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;By default, raw climate values are shown, e.g., a time series of temperature values.
This is unchanged from before.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/post/climdist_ts1.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;When the delta change option is checked, plots and statistics update to reflect change vs. historical baseline average.
Climatologies use CRU 4.0 data. The period can range anywhere from 1950 - 2009, defaulting the the 1980 - 2009 30-year climatology.
Climatologies are unique to each geographic region and seasonal period.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/post/climdist_ts2.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;As you can see above, some comparisons of change over time are easier to glean from the plot when viewing delta change instead of raw values.
Also note that temperature deltas or anomalies are differential whereas change in precipitation is proportional.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Shiny app: Distributions of random variables</title>
      <link>/post/shiny-app-distributions-of-random-variables/</link>
      <pubDate>Thu, 12 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/shiny-app-distributions-of-random-variables/</guid>
      <description>&lt;p&gt;There is a new version of my &lt;a href=&#34;https://uasnap.shinyapps.io/rvdist/&#34; target=&#34;_blank&#34;&gt;Distributions of Random Variables&lt;/a&gt; Shiny app available.
This is a cleaned up modern revision of my original 2013 app series involving random variable probability distributions.
The primary change is a switch to &lt;code&gt;ggplot2&lt;/code&gt; from base graphics. I have added this app to my &lt;a href=&#34;https://github.com/ua-snap/shiny-apps&#34; target=&#34;_blank&#34;&gt;shiny-apps&lt;/a&gt; GitHub repository so the source code is available, including a script containing all those pesky &lt;code&gt;plotmath&lt;/code&gt; expressions.&lt;/p&gt;

&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;./img/post/rvdist.png&#34;/&gt;&lt;/p&gt;

&lt;p&gt;The app draws and plots samples from various well known discrete and continuous probability distributions, all of which are available in base R with the single exception of the Pareto distribution. To include this distribution, I used the &lt;code&gt;VGAM&lt;/code&gt; package. The plots include an overlay of the formula for the selected probability mass or density function.&lt;/p&gt;

&lt;p&gt;Available discrete distributions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Bernoulli&lt;/li&gt;
&lt;li&gt;Binomial&lt;/li&gt;
&lt;li&gt;Uniform&lt;/li&gt;
&lt;li&gt;Geometric&lt;/li&gt;
&lt;li&gt;Hypergeometric&lt;/li&gt;
&lt;li&gt;Negative Binomial&lt;/li&gt;
&lt;li&gt;Poisson&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Available continuous distributions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Beta&lt;/li&gt;
&lt;li&gt;Cauchy&lt;/li&gt;
&lt;li&gt;Chi-squared&lt;/li&gt;
&lt;li&gt;Exponential&lt;/li&gt;
&lt;li&gt;F&lt;/li&gt;
&lt;li&gt;Gamma&lt;/li&gt;
&lt;li&gt;Laplace (Double Exponential)&lt;/li&gt;
&lt;li&gt;Logistic&lt;/li&gt;
&lt;li&gt;Log-Normal&lt;/li&gt;
&lt;li&gt;Normal&lt;/li&gt;
&lt;li&gt;Pareto&lt;/li&gt;
&lt;li&gt;t&lt;/li&gt;
&lt;li&gt;Uniform&lt;/li&gt;
&lt;li&gt;Weibull&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Assorted Shiny apps collection, full code and data</title>
      <link>/post/2017-04-26-assorted-shiny-apps/</link>
      <pubDate>Wed, 26 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/2017-04-26-assorted-shiny-apps/</guid>
      <description>


&lt;p&gt;Here is an &lt;a href=&#34;https://github.com/ua-snap/shiny-apps&#34;&gt;assortment of R Shiny apps&lt;/a&gt; that you may find useful for exploration if you are in the process of learning Shiny and looking for something different. Some of these apps are very small and simple whereas others are large and complex. This repository provides full code and any necessary accompanying data sets. The repo also links to the apps hosted online at shinyapps.io so that you can run apps in your browser without having to download the entire collection repo to run apps locally. That and other details can be found at the repo linked above. This isn’t a tutorial or other form of support, but it’s plenty of R code to peruse if that is what you are looking for.&lt;/p&gt;
&lt;p&gt;A bit of backstory. If I recall correctly, I began exploring RStudio’s Shiny package when I first heard of it in late 2012. Needless to say, a lot has changed since then, including not only all the alpha-release code-breaking changes I had to adjust to when making my first apps and what features and capabilities Shiny has grown to offer, but also simply how I go about coding apps has changed over time symbiotically with the package’s continued development. None of the apps in this repository are quite that old, though a few are close. Even so, they have been maintained and updated and tweaked since then to keep with the times as necessary.&lt;/p&gt;
&lt;p&gt;Most of the apps are newer. But one nice thing about this collection is that it shows a diversity of approaches to coding different features and behavior into apps depending on their purposes and how for me that has changed over time. For example, some apps are heavy on maps. Prior to the robust availability of Leaflet in Shiny, I would tend to have a Shiny app display maps using static (but reactive) plots made with Lattice or ggplot2. There are many ways to do the same thing, and the way that is best in one case is not always the best way.&lt;/p&gt;
&lt;p&gt;Across these apps there are many other examples of different ways to implement the same general task, depending on how I want that to be presented to the user in a specific app. In other cases, some approaches have proven more powerful and outright superior to others and have won out and it is equally useful to see these examples of what once was considered to be “good enough” is no longer.&lt;/p&gt;
&lt;p&gt;Lastly, if you do happen to stumble upon something that is actually broken, I am unaware of it, so please let me know.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Custom images for Shiny dashboard valueBox icons</title>
      <link>/post/custom-images-for-shiny-dashboard-valuebox-icons/</link>
      <pubDate>Wed, 11 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>/post/custom-images-for-shiny-dashboard-valuebox-icons/</guid>
      <description>&lt;p&gt;The &lt;code&gt;shinydashboard&lt;/code&gt; package provides functions like &lt;code&gt;valueBox&lt;/code&gt; that conveniently display basic information like summary statistics. In addition to presenting a value and subtitle on a colored background, an icon may be included as well. However, the icon must come from either the Font Awesome or Glyphicon icon libraries and cannot be image files.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve &lt;a href=&#34;https://gist.github.com/leonawicz/0fab3796b02a62b7f3bd0c02a171f0b7&#34;&gt;provided a gist&lt;/a&gt; that shows how to achieve the use of custom icons with local image files stored in an app&amp;rsquo;s &lt;code&gt;www/&lt;/code&gt; directory. It involves overriding a couple functions in &lt;code&gt;shiny&lt;/code&gt; and &lt;code&gt;shinydashboard&lt;/code&gt; and adding a small bit of custom CSS. Ideally, functionality could be included in future versions of these two packages to allow this in a more robust and complete fashion. But for now, here is a way to do it yourself for value boxes.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;./img/post/valueboxes1.png&#34;&gt;&lt;img src=&#34;./img/post/valueboxes1.png&#34; alt=&#34;valueboxes1&#34; width=&#34;599&#34; height=&#34;351&#34; class=&#34;aligncenter size-full&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The gist above includes the &lt;code&gt;app.R&lt;/code&gt; file to run the &lt;a href=&#34;https://uasnap.shinyapps.io/customiconsdemo/&#34;&gt;Custom Icons Shiny app demo&lt;/a&gt; and the &lt;code&gt;override.R&lt;/code&gt; file which I have it &lt;code&gt;source&lt;/code&gt; separately. The gist also includes an &lt;code&gt;icons.R&lt;/code&gt; script to generate some statistics and probability themed icons from R. This is interesting and fun on its own. This is not needed to run the app, but the icons are of course needed. If you build the app locally you will have to run this script to generate the images and place them in your &lt;code&gt;www/&lt;/code&gt; folder. The live app demo contains them already.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve included both light and dark examples using icons that can be used to generally represent a distribution, mean, standard deviation, minimum, maximum, median or interquartile range. Note that &lt;code&gt;app.R&lt;/code&gt; adds some custom CSS; it is not sufficient to override the definitions of &lt;code&gt;icon&lt;/code&gt; and &lt;code&gt;valueBox&lt;/code&gt; alone. I placed it inline for to reduce the number of required files, but it could alternatively be loaded from a file using &lt;code&gt;includeCSS&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This overriding functionality is only for &lt;code&gt;valueBox&lt;/code&gt; widgets and the way in which a local image file is passed to &lt;code&gt;icon&lt;/code&gt; is with a named list where the available names are &lt;code&gt;src&lt;/code&gt; (required, image file name) and &lt;code&gt;width&lt;/code&gt; (optional, defaults to &lt;code&gt;&#39;100%&#39;&lt;/code&gt;). It is restrictive but demonstrates potential to use image files in place of icon library options without too much code refactoring.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mapmate 0.2.0</title>
      <link>/post/mapmate-0-2-0/</link>
      <pubDate>Tue, 15 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/mapmate-0-2-0/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;code&gt;mapmate&lt;/code&gt; is under development and blog posts can become outdated quickly. Up to date &lt;code&gt;mapmate&lt;/code&gt; documentation and tutorial examples can be found at the &lt;a href=&#34;https://leonawicz.github.io/mapmate/&#34;&gt;official mapmate Github pages&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/leonawicz/mapmate&#34;&gt;mapmate&lt;/a&gt; has now been updating from version 0.1.0 to 0.2.0 on Github. The key change is the incorporation of new functions, help docs and code examples focused on network maps, which is a more complex map type not previously covered. The new tutorial content below provides a a couple basic code examples for making network maps with &lt;code&gt;mapmate&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;While &lt;code&gt;mapmate&lt;/code&gt; is aimed at still image sequence generation, allowing the user to exert full control over how still image sequences are used to produce animations subsequently (GUI video editor, ffmpeg, ImageMagick, etc) and not directly at animating from R, the examples here include the use of the &lt;code&gt;animation&lt;/code&gt; package to help you quickly reproduce some basic animated gifs (as long as you have ImageMagick installed on your system). But the takeaway message is that &lt;code&gt;mapmate&lt;/code&gt; now has better support for still image map sequence generation when using the network map type based on great circle arc path traversal.&lt;/p&gt;

&lt;p&gt;If you are new to &lt;code&gt;mapmate&lt;/code&gt; there is also the &lt;a href=&#34;https://leonawicz.github.io/mapmate/mapmate.html&#34;&gt;introductory vignette&lt;/a&gt;. The &lt;a href=&#34;https://leonawicz.github.io/mapmate/networks.html&#34;&gt;content of this post&lt;/a&gt; is available on the &lt;a href=&#34;https://leonawicz.github.io/mapmate/&#34;&gt;mapmate Github pages&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;To install the package:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;devtools::install_github(&amp;quot;leonawicz/mapmate&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;networks&#34;&gt;Networks&lt;/h1&gt;

&lt;p&gt;The &lt;code&gt;save_map&lt;/code&gt; function in the &lt;code&gt;mapmate&lt;/code&gt; package offers the &lt;code&gt;type=&amp;quot;network&amp;quot;&lt;/code&gt; map type. This type of map displays networks or pathways defined by overlapping segments traversing along great circle arcs. This map type can be used to display arbitrary line segments as well if such data is provided, but the provided helper functions used here are aimed specifically at drawing great circles.&lt;/p&gt;

&lt;h1 id=&#34;setup&#34;&gt;Setup&lt;/h1&gt;

&lt;h2 id=&#34;obtain-great-circle-arc-endpoints&#34;&gt;Obtain great circle arc endpoints&lt;/h2&gt;

&lt;p&gt;The first example uses a flat map. Therefore it is important to break lines at the international dateline when preparing the data. In the second example, lines cross the dateline are not split because the segments will be plotted on the globe.&lt;/p&gt;

&lt;p&gt;First, begin with the &lt;code&gt;network&lt;/code&gt; data set provided in &lt;code&gt;mapmate&lt;/code&gt; is a simple data frame of lon/lat locations of various cities and corresponding weights related to population sizes. It must be expanded to a larger, more complex data frame that contains location pairs and, optionally, distances between locations in each pair. &lt;code&gt;gc_endpoints&lt;/code&gt; assists with this by simulating some pairs. The resulting data frame contains endpoints of lines that are defined subsequently.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;library(mapmate)
library(dplyr)

set.seed(192)
data(network)
network

distFun &amp;lt;- function(x) 1 - x/max(x)  # simple inverse distance weighting
endpoints &amp;lt;- gc_endpoints(network, &amp;quot;lon&amp;quot;, &amp;quot;lat&amp;quot;)
endpoints
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;obtain-great-circle-arcs&#34;&gt;Obtain great circle arcs&lt;/h2&gt;

&lt;p&gt;Next, we sample based on a combination of weights. This is an arbitrary and optional step. The example is given primarily to make the data set used in these examples smaller in size. More importantly, the &lt;code&gt;gc_arcs&lt;/code&gt; helper function is used to further expand the &lt;code&gt;endpoints&lt;/code&gt; data frame to one containing sequences of points describing great circle arcs instead of only their endpoints.&lt;/p&gt;

&lt;p&gt;The default number of points added between the endpoints of each great circle arc is &lt;code&gt;n=50&lt;/code&gt;, but this can be changed and can also differ for each arc (e.g., based on distance between points). As noted, arcs are filled out planning for use with both flat maps and a globes. A &lt;code&gt;group&lt;/code&gt; column is used to identify distinct arcs for plotting.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;# take a weighted sample, e.g., favoring larger averaged populations and
# shorter distances
endpoints &amp;lt;- mutate(endpoints, Dist_wts = distFun(Dist))
endpoints &amp;lt;- sample_n(endpoints, 500, replace = TRUE, weight = (Pop_wts0 + Pop_wts1)/2 + 
    Dist_wts)

# expand data frame from endpoints to arcs, each composed of a sequence of
# points
arcs_flat &amp;lt;- gc_arcs(endpoints, &amp;quot;lon0&amp;quot;, &amp;quot;lat0&amp;quot;, &amp;quot;lon1&amp;quot;, &amp;quot;lat1&amp;quot;, breakAtDateLine = TRUE)
arcs_globe &amp;lt;- gc_arcs(endpoints, &amp;quot;lon0&amp;quot;, &amp;quot;lat0&amp;quot;, &amp;quot;lon1&amp;quot;, &amp;quot;lat1&amp;quot;)
arcs_globe
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;obtain-great-circle-arc-path-sequences&#34;&gt;Obtain great circle arc path sequences&lt;/h2&gt;

&lt;p&gt;Finally, &lt;code&gt;gc_paths&lt;/code&gt; is used to further expand the great circle arcs data frame into one that contains sequences of ordered segments along each arc. The segments can vary in length between distinct arcs and can overlap one another within an arc. The &lt;code&gt;group&lt;/code&gt; argument is required to identify distinct arcs in the input data frame. &lt;code&gt;size&lt;/code&gt; is required to set an upper limit on the number of points constituting an arc segment; the actual length of the segments is chosen randomly and uniformly between 2 and &lt;code&gt;size&lt;/code&gt;. Other arguments are optional.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;paths_flat &amp;lt;- gc_paths(arcs_flat, &amp;quot;group&amp;quot;, size = 5)
paths_globe &amp;lt;- gc_paths(arcs_globe, &amp;quot;group&amp;quot;, size = 5)
paths_globe
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;flat-map-network-animation&#34;&gt;Flat map network animation&lt;/h1&gt;

&lt;p&gt;The direction of arc traversal can also be controlled by the &lt;code&gt;direction&lt;/code&gt; argument if desired. This is useful for simulations if the input data are not yet randomized or if the directions simply need to be reversed. First some setup:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n &amp;lt;- max(paths_flat$id)
png.args &amp;lt;- list(width = 600, height = 300, bg = &amp;quot;black&amp;quot;)
clrs &amp;lt;- c(&amp;quot;#1E90FF50&amp;quot;, &amp;quot;#FFFFFF50&amp;quot;, &amp;quot;#FFFFFF&amp;quot;, &amp;quot;#1E90FF75&amp;quot;)
ylm &amp;lt;- range(paths_flat$lat)  # trimming empty southern map region
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Typically, I would leave the default arguments &lt;code&gt;save.plot=TRUE&lt;/code&gt; and &lt;code&gt;return.plot=FALSE&lt;/code&gt;, but here they are reversed for the purposes of the example. This returns a list of &lt;code&gt;ggplot&lt;/code&gt; objects rather than saving png files. Note that I still included the &lt;code&gt;png.args&lt;/code&gt; argument even though &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; will be discarded because &lt;code&gt;save_map&lt;/code&gt; will take the background color specified by &lt;code&gt;bg&lt;/code&gt; intended for png files and use it in the &lt;code&gt;ggplot2&lt;/code&gt; theme applied to the returned plots.&lt;/p&gt;

&lt;p&gt;The default background is transparent so I need to include this here since I have changed it to black. I have changed it to black in this example because I am making a reproducible gif for simplicity rather than doing any layering of separate image sequences in a video editor. Below, &lt;code&gt;saveGIF&lt;/code&gt; from the &lt;code&gt;animation&lt;/code&gt; package is used to make a simple gif from the plot sequence produced by &lt;code&gt;save_map&lt;/code&gt; by looping over the list of returned plots.&lt;/p&gt;

&lt;p&gt;In summary, this is all a somewhat convoluted scenario to show you a short animated gif representing plots made by &lt;code&gt;save_map&lt;/code&gt;. The intended use case for &lt;code&gt;save_map&lt;/code&gt; is to simply export the sequence of png files and the user can do whatever they wish with those files subsequently. If literally all you want to do is make a short, simple animated gif of custom plots using a small amount of data, &lt;em&gt;just use the animation package&lt;/em&gt;. You do not need &lt;code&gt;mapmate&lt;/code&gt; for that. Also, if you are using &lt;code&gt;animation&lt;/code&gt; in general, as with the code below, it is dependent on &lt;code&gt;ImageMagick&lt;/code&gt;, which you will also have to install.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gglist &amp;lt;- save_seq(paths_flat, id = &amp;quot;id&amp;quot;, n.frames = n, ortho = FALSE, type = &amp;quot;network&amp;quot;, 
    ylim = ylm, suffix = &amp;quot;2D&amp;quot;, png.args = png.args, save.plot = FALSE, return.plot = TRUE)

library(animation)
# you may need to specify a different path on your Windows machine you may
# also need to ensure convert.exe is part of your particular installation
ani.options(convert = &amp;quot;C:/Program Files/ImageMagick-7.0.3-Q16/convert.exe&amp;quot;)
saveGIF(for (i in seq_along(gglist)) print(gglist[[i]]), &amp;quot;network2D.gif&amp;quot;, interval = 1/20, 
    ani.width = 600, ani.height = 300)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;./img/post/network2d.gif&#34;&gt;&lt;img src=&#34;./img/post/network2d.gif?w=774&#34; alt=&#34;network2d&#34; width=&#34;774&#34; height=&#34;387&#34; class=&#34;aligncenter size-large&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This &lt;code&gt;animation&lt;/code&gt;-dependent example and the animated gif are not meant to be distractions from the purpose of this package. Despite the example gif, any code here related to &lt;code&gt;animation&lt;/code&gt; is beyond the scope of this tutorial. If you have trouble running it, see the &lt;code&gt;animation&lt;/code&gt; documentation and just do the following example instead, which is the way &lt;code&gt;mapmate&lt;/code&gt; is meant to be used:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;save_seq(paths_flat, id = &amp;quot;id&amp;quot;, n.frames = n, ortho = FALSE, type = &amp;quot;network&amp;quot;, 
    suffix = &amp;quot;2D&amp;quot;, png.args = png.args)
# Next, do whatever you want with the files, such as import them to a video
# editing program
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;globe-network-animation&#34;&gt;Globe network animation&lt;/h1&gt;

&lt;p&gt;Here is an example plotting network paths along great circle arcs on the globe. Remember that we use the other data set, which was generated with the default &lt;code&gt;breakAtDateline=FALSE&lt;/code&gt; in &lt;code&gt;gc_arcs&lt;/code&gt;. As a side note, if you redo the above example for flat maps using the unbroken data, &lt;code&gt;paths_globe&lt;/code&gt;, you will see why the arc segments are handled differently when preparing data for flat maps vs. for globes.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;n &amp;lt;- max(paths_flat$id)
png.args &amp;lt;- list(width = 600, height = 600, bg = &amp;quot;black&amp;quot;)
clrs &amp;lt;- c(&amp;quot;#FFFFFF&amp;quot;, &amp;quot;#FF450050&amp;quot;, &amp;quot;#FF4500&amp;quot;, &amp;quot;#FFFFFF50&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;gglist &amp;lt;- save_seq(paths_globe, id = &amp;quot;id&amp;quot;, n.frames = n, col = clrs, type = &amp;quot;network&amp;quot;, 
    pt.size = c(1, 1, 3, 2), suffix = &amp;quot;3D&amp;quot;, png.args = png.args, save.plot = FALSE, 
    return.plot = TRUE)

library(animation)
ani.options(convert = &amp;quot;C:/Program Files/ImageMagick-7.0.3-Q16/convert.exe&amp;quot;)
saveGIF(for (i in seq_along(gglist)) print(gglist[[i]]), &amp;quot;network3D.gif&amp;quot;, interval = 1/20, 
    ani.width = 600, ani.height = 600)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;./img/post/network3d.gif&#34;&gt;&lt;img src=&#34;./img/post/network3d.gif&#34; alt=&#34;network3d&#34; width=&#34;600&#34; height=&#34;600&#34; class=&#34;aligncenter size-full&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Again, normal usage is to just do the following and then use the saved still image sequence with full user control for whatever you like:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-r&#34;&gt;save_seq(paths_globe, id = &amp;quot;id&amp;quot;, n.frames = n, col = clrs, type = &amp;quot;network&amp;quot;, 
    pt.size = c(1, 1, 3, 2), suffix = &amp;quot;3D&amp;quot;, png.args = png.args)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here are a few more advanced animations based on still image sequences of great circle arc network maps produced using &lt;code&gt;mapmate&lt;/code&gt; code:&lt;/p&gt;

&lt;h3 id=&#34;historical-and-projected-global-temperature-anomalies&#34;&gt;Historical and projected global temperature anomalies&lt;/h3&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/xhqEkyJDBho?ecver=2&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;global-uaf-snap-shiny-apps-web-traffic&#34;&gt;Global UAF/SNAP Shiny Apps web traffic&lt;/h3&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/uQYR91qixgo?ecver=2&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;flat-map-great-circle-animation-example&#34;&gt;Flat map great circle animation example&lt;/h3&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/yoyIUMvIP3Q?ecver=2&#34; width=&#34;640&#34; height=&#34;360&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h1 id=&#34;mapmate-0-2-0-release-date-2016-11-15&#34;&gt;mapmate 0.2.0 (Release date: 2016-11-15)&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Added functions to assist with network maps: &lt;code&gt;gc_endpoints&lt;/code&gt;, &lt;code&gt;gc_arcs&lt;/code&gt;, and &lt;code&gt;gc_paths&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Added help documentation and runnable examples of the network-related functions.&lt;/li&gt;
&lt;li&gt;Added &lt;code&gt;network&lt;/code&gt; data set to package.&lt;/li&gt;
&lt;li&gt;Added unit tests for network-related functions.&lt;/li&gt;
&lt;li&gt;Added tutorial/examples for network maps to the package Github pages.&lt;/li&gt;
&lt;li&gt;Included simple animated gif examples in above page, piggybacked on &lt;code&gt;animation&lt;/code&gt; package.&lt;/li&gt;
&lt;li&gt;Bug fixes.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>R animation: global climate change</title>
      <link>/post/r-animation-global-climate-change/</link>
      <pubDate>Thu, 29 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>/post/r-animation-global-climate-change/</guid>
      <description>&lt;p&gt;I have posted a new R data animation video. It&amp;rsquo;s an example animation of modeled historical and projected global temperature change from 1850 - 2100. The data prep, analysis, full processing and generation of all sets of still frames for each layer in the video are done using R.&lt;/p&gt;

&lt;div style=&#34;text-align:center;&#34;&gt;
&lt;iframe src=&#34;https://www.youtube.com/embed/xhqEkyJDBho?ecver=2&#34; width=&#34;640&#34; height=&#34;360&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;Typically an ensemble of models would be used but this video is just to demonstrate a basic animation using one climate model, both with a monthly time series and a monthly 10-year moving average time series. If wondering about the y-axis range, the animation shows anomalies, or delta change, from the climate model&amp;rsquo;s historical baseline monthly average temperatures using a given climatology window.&lt;/p&gt;

&lt;p&gt;In a later video I will use annual and seasonal averages, which will display a smoother signal than monthly series.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
